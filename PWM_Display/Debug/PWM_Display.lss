
PWM_Display.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001618  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000e4  00800060  00001618  000016ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800144  00800144  00001790  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001790  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000017c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000178  00000000  00000000  000017fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002dc9  00000000  00000000  00001974  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b4f  00000000  00000000  0000473d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000013d7  00000000  00000000  0000528c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000304  00000000  00000000  00006664  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009f2  00000000  00000000  00006968  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001516  00000000  00000000  0000735a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  00008870  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__ctors_end>
       4:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
       8:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
       c:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      10:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      14:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      18:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      1c:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      20:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      24:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      28:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      2c:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      30:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      34:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      38:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      3c:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      40:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      44:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      48:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      4c:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>
      50:	0c 94 0b 02 	jmp	0x416	; 0x416 <__bad_interrupt>

00000054 <ARR_GlcdFont_U8>:
      54:	ff ff ff ff ff 00 ff ff ff ff ff ff 00 ff ff ff     ................
      64:	ff ff ff 00 ff ff ff ff ff ff 00 ff ff ff ff ff     ................
      74:	ff 00 ff ff ff ff ff ff 00 ff ff ff ff ff ff 00     ................
      84:	ff ff ff ff ff ff 00 ff ff ff ff ff ff 00 ff ff     ................
      94:	ff ff ff ff 00 ff ff ff ff ff ff 00 ff ff ff ff     ................
      a4:	ff ff 00 ff ff ff ff ff ff 00 ff ff ff ff ff ff     ................
      b4:	00 ff ff ff ff ff ff 00 ff ff ff ff ff ff 00 ff     ................
      c4:	ff ff ff ff ff 00 ff ff ff ff ff ff 00 ff ff ff     ................
      d4:	ff ff ff 00 ff ff ff ff ff ff 00 ff ff ff ff ff     ................
      e4:	ff 00 ff ff ff ff ff ff 00 ff ff ff ff ff ff 00     ................
      f4:	ff ff ff ff ff ff 00 ff ff ff ff ff ff 00 ff ff     ................
     104:	ff ff ff ff 00 ff ff ff ff ff ff 00 ff ff ff ff     ................
     114:	ff ff 00 ff ff ff ff ff ff 00 ff ff ff ff ff ff     ................
     124:	00 ff ff ff ff ff ff 00 ff ff ff ff ff ff 00 ff     ................
     134:	00 00 00 00 00 ff ff 00 00 4f 00 00 00 ff 00 07     .........O......
     144:	00 07 00 00 ff 14 7f 14 7f 14 00 ff 24 2a 7f 2a     ............$*.*
     154:	12 00 ff 23 13 08 64 62 00 ff 36 49 55 22 20 00     ...#..db..6IU" .
     164:	ff 00 05 03 00 00 00 ff 00 1c 22 41 00 00 ff 00     .........."A....
     174:	41 22 1c 00 00 ff 14 08 3e 08 14 00 ff 08 08 3e     A"......>......>
     184:	08 08 00 ff 50 30 00 00 00 00 ff 08 08 08 08 08     ....P0..........
     194:	00 ff 00 60 60 00 00 00 ff 20 10 08 04 02 00 ff     ...``.... ......
     1a4:	3e 51 49 45 3e 00 ff 40 42 7f 40 40 00 ff 42 61     >QIE>..@B.@@..Ba
     1b4:	51 49 46 00 ff 21 41 45 4b 31 00 ff 18 14 12 7f     QIF..!AEK1......
     1c4:	10 00 ff 27 45 45 45 39 00 ff 3c 4a 49 49 30 00     ...'EEE9..<JII0.
     1d4:	ff 01 71 09 05 03 00 ff 36 49 49 49 36 00 ff 06     ..q.....6III6...
     1e4:	49 49 29 1e 00 ff 00 36 36 00 00 00 ff 00 56 36     II)....66.....V6
     1f4:	00 00 00 ff 08 14 22 41 00 00 ff 14 14 14 14 14     ......"A........
     204:	00 ff 00 41 22 14 08 00 ff 02 01 51 09 06 00 ff     ...A"......Q....
     214:	3e 41 5d 55 1e 00 ff 7e 11 11 11 7e 00 ff 7f 49     >A]U...~...~...I
     224:	49 49 36 00 ff 3e 41 41 41 22 00 ff 7f 41 41 22     II6..>AAA"...AA"
     234:	1c 00 ff 7f 49 49 49 41 00 ff 7f 09 09 09 01 00     ....IIIA........
     244:	ff 3e 41 49 49 7a 00 ff 7f 08 08 08 7f 00 ff 00     .>AIIz..........
     254:	41 7f 41 00 00 ff 20 40 41 3f 01 00 ff 7f 08 14     A.A... @A?......
     264:	22 41 00 ff 7f 40 40 40 40 00 ff 7f 02 0c 02 7f     "A...@@@@.......
     274:	00 ff 7f 04 08 10 7f 00 ff 3e 41 41 41 3e 00 ff     .........>AAA>..
     284:	7f 09 09 09 06 00 ff 3e 41 51 21 5e 00 ff 7f 09     .......>AQ!^....
     294:	19 29 46 00 ff 26 49 49 49 32 00 ff 01 01 7f 01     .)F..&III2......
     2a4:	01 00 ff 3f 40 40 40 3f 00 ff 1f 20 40 20 1f 00     ...?@@@?... @ ..
     2b4:	ff 3f 40 38 40 3f 00 ff 63 14 08 14 63 00 ff 07     .?@8@?..c...c...
     2c4:	08 70 08 07 00 ff 61 51 49 45 43 00 ff 00 7f 41     .p....aQIEC....A
     2d4:	41 00 00 ff 02 04 08 10 20 00 ff 00 41 41 7f 00     A....... ...AA..
     2e4:	00 ff 04 02 01 02 04 00 ff 40 40 40 40 40 00 ff     .........@@@@@..
     2f4:	00 00 03 05 00 00 ff 20 54 54 54 78 00 ff 7f 44     ....... TTTx...D
     304:	44 44 38 00 ff 38 44 44 44 44 00 ff 38 44 44 44     DD8..8DDDD..8DDD
     314:	7f 00 ff 38 54 54 54 18 00 ff 04 04 7e 05 05 00     ...8TTT.....~...
     324:	ff 08 54 54 54 3c 00 ff 7f 08 04 04 78 00 ff 00     ..TTT<......x...
     334:	44 7d 40 00 ff ff 20 40 44 3d 00 ff ff 7f 10 28     D}@... @D=.....(
     344:	44 00 ff ff 41 7f 40 00 ff ff ff 7c 04 7c 04 78     D...A.@....|.|.x
     354:	00 ff 7c 08 04 04 78 00 ff 38 44 44 44 38 00 ff     ..|...x..8DDD8..
     364:	7c 14 14 14 08 00 ff 08 14 14 14 7c 00 ff 7c 08     |..........|..|.
     374:	04 04 00 ff ff 48 54 54 54 24 00 ff 04 04 3f 44     .....HTTT$....?D
     384:	44 00 ff 3c 40 40 20 7c 00 ff 1c 20 40 20 1c 00     D..<@@ |... @ ..
     394:	ff 3c 40 30 40 3c 00 ff 44 28 10 28 44 00 ff 0c     .<@0@<..D(.(D...
     3a4:	50 50 50 3c 00 ff 44 64 54 4c 44 00 ff 08 36 41     PPP<..DdTLD...6A
     3b4:	41 00 00 ff 00 00 77 00 00 00 ff 00 41 41 36 08     A.....w.....AA6.
     3c4:	00 ff 08 08 2a 1c 08 00 ff 08 1c 2a 08 08 00 ff     ....*......*....
     3d4:	ff ff ff ff ff 00 ff 00                             ........

000003dc <__ctors_end>:
     3dc:	11 24       	eor	r1, r1
     3de:	1f be       	out	0x3f, r1	; 63
     3e0:	cf e5       	ldi	r28, 0x5F	; 95
     3e2:	d8 e0       	ldi	r29, 0x08	; 8
     3e4:	de bf       	out	0x3e, r29	; 62
     3e6:	cd bf       	out	0x3d, r28	; 61

000003e8 <__do_copy_data>:
     3e8:	11 e0       	ldi	r17, 0x01	; 1
     3ea:	a0 e6       	ldi	r26, 0x60	; 96
     3ec:	b0 e0       	ldi	r27, 0x00	; 0
     3ee:	e8 e1       	ldi	r30, 0x18	; 24
     3f0:	f6 e1       	ldi	r31, 0x16	; 22
     3f2:	02 c0       	rjmp	.+4      	; 0x3f8 <__do_copy_data+0x10>
     3f4:	05 90       	lpm	r0, Z+
     3f6:	0d 92       	st	X+, r0
     3f8:	a4 34       	cpi	r26, 0x44	; 68
     3fa:	b1 07       	cpc	r27, r17
     3fc:	d9 f7       	brne	.-10     	; 0x3f4 <__do_copy_data+0xc>

000003fe <__do_clear_bss>:
     3fe:	21 e0       	ldi	r18, 0x01	; 1
     400:	a4 e4       	ldi	r26, 0x44	; 68
     402:	b1 e0       	ldi	r27, 0x01	; 1
     404:	01 c0       	rjmp	.+2      	; 0x408 <.do_clear_bss_start>

00000406 <.do_clear_bss_loop>:
     406:	1d 92       	st	X+, r1

00000408 <.do_clear_bss_start>:
     408:	ac 34       	cpi	r26, 0x4C	; 76
     40a:	b2 07       	cpc	r27, r18
     40c:	e1 f7       	brne	.-8      	; 0x406 <.do_clear_bss_loop>
     40e:	0e 94 ac 04 	call	0x958	; 0x958 <main>
     412:	0c 94 0a 0b 	jmp	0x1614	; 0x1614 <_exit>

00000416 <__bad_interrupt>:
     416:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000041a <Drawing_WAVEFORM>:
	
}

void Drawing_WAVEFORM(Uint8 duty){
	Uint8 temp=duty;
	if (temp>=0 && temp<=25)
     41a:	8a 31       	cpi	r24, 0x1A	; 26
     41c:	08 f0       	brcs	.+2      	; 0x420 <Drawing_WAVEFORM+0x6>
     41e:	bd c0       	rjmp	.+378    	; 0x59a <Drawing_WAVEFORM+0x180>
	{
		if(temp == 0){
     420:	81 11       	cpse	r24, r1
     422:	09 c0       	rjmp	.+18     	; 0x436 <Drawing_WAVEFORM+0x1c>
			GLCD_SetCursor(0,7,0);
     424:	40 e0       	ldi	r20, 0x00	; 0
     426:	67 e0       	ldi	r22, 0x07	; 7
     428:	0e 94 14 06 	call	0xc28	; 0xc28 <GLCD_SetCursor>
			GLCD_DisplayString("_____________________");
     42c:	80 ea       	ldi	r24, 0xA0	; 160
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	0e 94 0e 07 	call	0xe1c	; 0xe1c <GLCD_DisplayString>
     434:	08 95       	ret
		}
		else
		{
		
		GLCD_GoToLine(4);
     436:	84 e0       	ldi	r24, 0x04	; 4
     438:	0e 94 59 06 	call	0xcb2	; 0xcb2 <GLCD_GoToLine>
		GLCD_DisplayChar('_');
     43c:	8f e5       	ldi	r24, 0x5F	; 95
     43e:	0e 94 ce 06 	call	0xd9c	; 0xd9c <GLCD_DisplayChar>
		GLCD_DisplayChar('_');
     442:	8f e5       	ldi	r24, 0x5F	; 95
     444:	0e 94 ce 06 	call	0xd9c	; 0xd9c <GLCD_DisplayChar>
		GLCD_GoToLine(5);
     448:	85 e0       	ldi	r24, 0x05	; 5
     44a:	0e 94 59 06 	call	0xcb2	; 0xcb2 <GLCD_GoToLine>
		GLCD_DisplayString("  |");
     44e:	8a eb       	ldi	r24, 0xBA	; 186
     450:	90 e0       	ldi	r25, 0x00	; 0
     452:	0e 94 0e 07 	call	0xe1c	; 0xe1c <GLCD_DisplayString>
		GLCD_GoToLine(6);
     456:	86 e0       	ldi	r24, 0x06	; 6
     458:	0e 94 59 06 	call	0xcb2	; 0xcb2 <GLCD_GoToLine>
		GLCD_DisplayString("  |");
     45c:	8a eb       	ldi	r24, 0xBA	; 186
     45e:	90 e0       	ldi	r25, 0x00	; 0
     460:	0e 94 0e 07 	call	0xe1c	; 0xe1c <GLCD_DisplayString>
		GLCD_GoToLine(7);
     464:	87 e0       	ldi	r24, 0x07	; 7
     466:	0e 94 59 06 	call	0xcb2	; 0xcb2 <GLCD_GoToLine>
		GLCD_DisplayString("  |");
     46a:	8a eb       	ldi	r24, 0xBA	; 186
     46c:	90 e0       	ldi	r25, 0x00	; 0
     46e:	0e 94 0e 07 	call	0xe1c	; 0xe1c <GLCD_DisplayString>
		GLCD_DisplayChar('_');
     472:	8f e5       	ldi	r24, 0x5F	; 95
     474:	0e 94 ce 06 	call	0xd9c	; 0xd9c <GLCD_DisplayChar>
		GLCD_DisplayChar('_');
     478:	8f e5       	ldi	r24, 0x5F	; 95
     47a:	0e 94 ce 06 	call	0xd9c	; 0xd9c <GLCD_DisplayChar>
		GLCD_DisplayChar('_');
     47e:	8f e5       	ldi	r24, 0x5F	; 95
     480:	0e 94 ce 06 	call	0xd9c	; 0xd9c <GLCD_DisplayChar>
		GLCD_DisplayChar('_');
     484:	8f e5       	ldi	r24, 0x5F	; 95
     486:	0e 94 ce 06 	call	0xd9c	; 0xd9c <GLCD_DisplayChar>
		GLCD_DisplayChar('_');
     48a:	8f e5       	ldi	r24, 0x5F	; 95
     48c:	0e 94 ce 06 	call	0xd9c	; 0xd9c <GLCD_DisplayChar>
		GLCD_DisplayString("|");
     490:	8c eb       	ldi	r24, 0xBC	; 188
     492:	90 e0       	ldi	r25, 0x00	; 0
     494:	0e 94 0e 07 	call	0xe1c	; 0xe1c <GLCD_DisplayString>
		GLCD_SetCursor(0,6,46);
     498:	4e e2       	ldi	r20, 0x2E	; 46
     49a:	66 e0       	ldi	r22, 0x06	; 6
     49c:	80 e0       	ldi	r24, 0x00	; 0
     49e:	0e 94 14 06 	call	0xc28	; 0xc28 <GLCD_SetCursor>
		GLCD_DisplayString("|");
     4a2:	8c eb       	ldi	r24, 0xBC	; 188
     4a4:	90 e0       	ldi	r25, 0x00	; 0
     4a6:	0e 94 0e 07 	call	0xe1c	; 0xe1c <GLCD_DisplayString>
		GLCD_SetCursor(0,5,46);
     4aa:	4e e2       	ldi	r20, 0x2E	; 46
     4ac:	65 e0       	ldi	r22, 0x05	; 5
     4ae:	80 e0       	ldi	r24, 0x00	; 0
     4b0:	0e 94 14 06 	call	0xc28	; 0xc28 <GLCD_SetCursor>
		GLCD_DisplayString("|");
     4b4:	8c eb       	ldi	r24, 0xBC	; 188
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	0e 94 0e 07 	call	0xe1c	; 0xe1c <GLCD_DisplayString>
		GLCD_SetCursor(0,4,50);
     4bc:	42 e3       	ldi	r20, 0x32	; 50
     4be:	64 e0       	ldi	r22, 0x04	; 4
     4c0:	80 e0       	ldi	r24, 0x00	; 0
     4c2:	0e 94 14 06 	call	0xc28	; 0xc28 <GLCD_SetCursor>
		GLCD_DisplayChar('_');
     4c6:	8f e5       	ldi	r24, 0x5F	; 95
     4c8:	0e 94 ce 06 	call	0xd9c	; 0xd9c <GLCD_DisplayChar>
		GLCD_DisplayChar('_');
     4cc:	8f e5       	ldi	r24, 0x5F	; 95
     4ce:	0e 94 ce 06 	call	0xd9c	; 0xd9c <GLCD_DisplayChar>
		
		GLCD_SetCursor(0,5,60);
     4d2:	4c e3       	ldi	r20, 0x3C	; 60
     4d4:	65 e0       	ldi	r22, 0x05	; 5
     4d6:	80 e0       	ldi	r24, 0x00	; 0
     4d8:	0e 94 14 06 	call	0xc28	; 0xc28 <GLCD_SetCursor>
		GLCD_DisplayChar('|');
     4dc:	8c e7       	ldi	r24, 0x7C	; 124
     4de:	0e 94 ce 06 	call	0xd9c	; 0xd9c <GLCD_DisplayChar>
		GLCD_SetCursor(0,6,60);
     4e2:	4c e3       	ldi	r20, 0x3C	; 60
     4e4:	66 e0       	ldi	r22, 0x06	; 6
     4e6:	80 e0       	ldi	r24, 0x00	; 0
     4e8:	0e 94 14 06 	call	0xc28	; 0xc28 <GLCD_SetCursor>
		GLCD_DisplayChar('|');
     4ec:	8c e7       	ldi	r24, 0x7C	; 124
     4ee:	0e 94 ce 06 	call	0xd9c	; 0xd9c <GLCD_DisplayChar>
		GLCD_SetCursor(0,7,60);
     4f2:	4c e3       	ldi	r20, 0x3C	; 60
     4f4:	67 e0       	ldi	r22, 0x07	; 7
     4f6:	80 e0       	ldi	r24, 0x00	; 0
     4f8:	0e 94 14 06 	call	0xc28	; 0xc28 <GLCD_SetCursor>
		GLCD_DisplayChar('|');
     4fc:	8c e7       	ldi	r24, 0x7C	; 124
     4fe:	0e 94 ce 06 	call	0xd9c	; 0xd9c <GLCD_DisplayChar>
		GLCD_SetCursor(0,7,64);
     502:	40 e4       	ldi	r20, 0x40	; 64
     504:	67 e0       	ldi	r22, 0x07	; 7
     506:	80 e0       	ldi	r24, 0x00	; 0
     508:	0e 94 14 06 	call	0xc28	; 0xc28 <GLCD_SetCursor>
		GLCD_DisplayString("_____");
     50c:	80 eb       	ldi	r24, 0xB0	; 176
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	0e 94 0e 07 	call	0xe1c	; 0xe1c <GLCD_DisplayString>
		GLCD_SetCursor(1,7,32);
     514:	40 e2       	ldi	r20, 0x20	; 32
     516:	67 e0       	ldi	r22, 0x07	; 7
     518:	81 e0       	ldi	r24, 0x01	; 1
     51a:	0e 94 14 06 	call	0xc28	; 0xc28 <GLCD_SetCursor>
		GLCD_DisplayChar('|');
     51e:	8c e7       	ldi	r24, 0x7C	; 124
     520:	0e 94 ce 06 	call	0xd9c	; 0xd9c <GLCD_DisplayChar>
		GLCD_SetCursor(1,6,32);
     524:	40 e2       	ldi	r20, 0x20	; 32
     526:	66 e0       	ldi	r22, 0x06	; 6
     528:	81 e0       	ldi	r24, 0x01	; 1
     52a:	0e 94 14 06 	call	0xc28	; 0xc28 <GLCD_SetCursor>
		GLCD_DisplayChar('|');
     52e:	8c e7       	ldi	r24, 0x7C	; 124
     530:	0e 94 ce 06 	call	0xd9c	; 0xd9c <GLCD_DisplayChar>
		GLCD_SetCursor(1,5,32);
     534:	40 e2       	ldi	r20, 0x20	; 32
     536:	65 e0       	ldi	r22, 0x05	; 5
     538:	81 e0       	ldi	r24, 0x01	; 1
     53a:	0e 94 14 06 	call	0xc28	; 0xc28 <GLCD_SetCursor>
		GLCD_DisplayChar('|');
     53e:	8c e7       	ldi	r24, 0x7C	; 124
     540:	0e 94 ce 06 	call	0xd9c	; 0xd9c <GLCD_DisplayChar>
		GLCD_SetCursor(1,4,36);
     544:	44 e2       	ldi	r20, 0x24	; 36
     546:	64 e0       	ldi	r22, 0x04	; 4
     548:	81 e0       	ldi	r24, 0x01	; 1
     54a:	0e 94 14 06 	call	0xc28	; 0xc28 <GLCD_SetCursor>
		GLCD_DisplayString("__");
     54e:	83 eb       	ldi	r24, 0xB3	; 179
     550:	90 e0       	ldi	r25, 0x00	; 0
     552:	0e 94 0e 07 	call	0xe1c	; 0xe1c <GLCD_DisplayString>
		GLCD_SetCursor(1,5,46);
     556:	4e e2       	ldi	r20, 0x2E	; 46
     558:	65 e0       	ldi	r22, 0x05	; 5
     55a:	81 e0       	ldi	r24, 0x01	; 1
     55c:	0e 94 14 06 	call	0xc28	; 0xc28 <GLCD_SetCursor>
		GLCD_DisplayChar('|');
     560:	8c e7       	ldi	r24, 0x7C	; 124
     562:	0e 94 ce 06 	call	0xd9c	; 0xd9c <GLCD_DisplayChar>
		GLCD_SetCursor(1,6,46);
     566:	4e e2       	ldi	r20, 0x2E	; 46
     568:	66 e0       	ldi	r22, 0x06	; 6
     56a:	81 e0       	ldi	r24, 0x01	; 1
     56c:	0e 94 14 06 	call	0xc28	; 0xc28 <GLCD_SetCursor>
		GLCD_DisplayChar('|');
     570:	8c e7       	ldi	r24, 0x7C	; 124
     572:	0e 94 ce 06 	call	0xd9c	; 0xd9c <GLCD_DisplayChar>
		GLCD_SetCursor(1,7,46);
     576:	4e e2       	ldi	r20, 0x2E	; 46
     578:	67 e0       	ldi	r22, 0x07	; 7
     57a:	81 e0       	ldi	r24, 0x01	; 1
     57c:	0e 94 14 06 	call	0xc28	; 0xc28 <GLCD_SetCursor>
		GLCD_DisplayChar('|');
     580:	8c e7       	ldi	r24, 0x7C	; 124
     582:	0e 94 ce 06 	call	0xd9c	; 0xd9c <GLCD_DisplayChar>
		GLCD_SetCursor(1,7,50);
     586:	42 e3       	ldi	r20, 0x32	; 50
     588:	67 e0       	ldi	r22, 0x07	; 7
     58a:	81 e0       	ldi	r24, 0x01	; 1
     58c:	0e 94 14 06 	call	0xc28	; 0xc28 <GLCD_SetCursor>
		GLCD_DisplayString("__");
     590:	83 eb       	ldi	r24, 0xB3	; 179
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	0e 94 0e 07 	call	0xe1c	; 0xe1c <GLCD_DisplayString>
     598:	08 95       	ret
		}
	}
	else if (temp>25 && temp<49){
     59a:	96 ee       	ldi	r25, 0xE6	; 230
     59c:	98 0f       	add	r25, r24
     59e:	97 31       	cpi	r25, 0x17	; 23
     5a0:	08 f0       	brcs	.+2      	; 0x5a4 <Drawing_WAVEFORM+0x18a>
     5a2:	af c0       	rjmp	.+350    	; 0x702 <Drawing_WAVEFORM+0x2e8>
			GLCD_GoToLine(4);
     5a4:	84 e0       	ldi	r24, 0x04	; 4
     5a6:	0e 94 59 06 	call	0xcb2	; 0xcb2 <GLCD_GoToLine>
			GLCD_DisplayString("___");
     5aa:	82 eb       	ldi	r24, 0xB2	; 178
     5ac:	90 e0       	ldi	r25, 0x00	; 0
     5ae:	0e 94 0e 07 	call	0xe1c	; 0xe1c <GLCD_DisplayString>
			GLCD_SetCursor(0,5,17);
     5b2:	41 e1       	ldi	r20, 0x11	; 17
     5b4:	65 e0       	ldi	r22, 0x05	; 5
     5b6:	80 e0       	ldi	r24, 0x00	; 0
     5b8:	0e 94 14 06 	call	0xc28	; 0xc28 <GLCD_SetCursor>
			GLCD_DisplayChar('|');
     5bc:	8c e7       	ldi	r24, 0x7C	; 124
     5be:	0e 94 ce 06 	call	0xd9c	; 0xd9c <GLCD_DisplayChar>
			GLCD_SetCursor(0,6,17);
     5c2:	41 e1       	ldi	r20, 0x11	; 17
     5c4:	66 e0       	ldi	r22, 0x06	; 6
     5c6:	80 e0       	ldi	r24, 0x00	; 0
     5c8:	0e 94 14 06 	call	0xc28	; 0xc28 <GLCD_SetCursor>
			GLCD_DisplayChar('|');
     5cc:	8c e7       	ldi	r24, 0x7C	; 124
     5ce:	0e 94 ce 06 	call	0xd9c	; 0xd9c <GLCD_DisplayChar>
			GLCD_SetCursor(0,7,17);
     5d2:	41 e1       	ldi	r20, 0x11	; 17
     5d4:	67 e0       	ldi	r22, 0x07	; 7
     5d6:	80 e0       	ldi	r24, 0x00	; 0
     5d8:	0e 94 14 06 	call	0xc28	; 0xc28 <GLCD_SetCursor>
			GLCD_DisplayChar('|');
     5dc:	8c e7       	ldi	r24, 0x7C	; 124
     5de:	0e 94 ce 06 	call	0xd9c	; 0xd9c <GLCD_DisplayChar>
			GLCD_SetCursor(0,7,22);
     5e2:	46 e1       	ldi	r20, 0x16	; 22
     5e4:	67 e0       	ldi	r22, 0x07	; 7
     5e6:	80 e0       	ldi	r24, 0x00	; 0
     5e8:	0e 94 14 06 	call	0xc28	; 0xc28 <GLCD_SetCursor>
			GLCD_DisplayString("____");
     5ec:	81 eb       	ldi	r24, 0xB1	; 177
     5ee:	90 e0       	ldi	r25, 0x00	; 0
     5f0:	0e 94 0e 07 	call	0xe1c	; 0xe1c <GLCD_DisplayString>
			GLCD_SetCursor(0,7,45);
     5f4:	4d e2       	ldi	r20, 0x2D	; 45
     5f6:	67 e0       	ldi	r22, 0x07	; 7
     5f8:	80 e0       	ldi	r24, 0x00	; 0
     5fa:	0e 94 14 06 	call	0xc28	; 0xc28 <GLCD_SetCursor>
			GLCD_DisplayChar('|');
     5fe:	8c e7       	ldi	r24, 0x7C	; 124
     600:	0e 94 ce 06 	call	0xd9c	; 0xd9c <GLCD_DisplayChar>
			GLCD_SetCursor(0,6,45);
     604:	4d e2       	ldi	r20, 0x2D	; 45
     606:	66 e0       	ldi	r22, 0x06	; 6
     608:	80 e0       	ldi	r24, 0x00	; 0
     60a:	0e 94 14 06 	call	0xc28	; 0xc28 <GLCD_SetCursor>
			GLCD_DisplayChar('|');
     60e:	8c e7       	ldi	r24, 0x7C	; 124
     610:	0e 94 ce 06 	call	0xd9c	; 0xd9c <GLCD_DisplayChar>
			GLCD_SetCursor(0,5,45);
     614:	4d e2       	ldi	r20, 0x2D	; 45
     616:	65 e0       	ldi	r22, 0x05	; 5
     618:	80 e0       	ldi	r24, 0x00	; 0
     61a:	0e 94 14 06 	call	0xc28	; 0xc28 <GLCD_SetCursor>
			GLCD_DisplayChar('|');
     61e:	8c e7       	ldi	r24, 0x7C	; 124
     620:	0e 94 ce 06 	call	0xd9c	; 0xd9c <GLCD_DisplayChar>
			GLCD_SetCursor(0,4,49);
     624:	41 e3       	ldi	r20, 0x31	; 49
     626:	64 e0       	ldi	r22, 0x04	; 4
     628:	80 e0       	ldi	r24, 0x00	; 0
     62a:	0e 94 14 06 	call	0xc28	; 0xc28 <GLCD_SetCursor>
			GLCD_DisplayString("___");
     62e:	82 eb       	ldi	r24, 0xB2	; 178
     630:	90 e0       	ldi	r25, 0x00	; 0
     632:	0e 94 0e 07 	call	0xe1c	; 0xe1c <GLCD_DisplayString>
			GLCD_SetCursor(1,5,1);
     636:	41 e0       	ldi	r20, 0x01	; 1
     638:	65 e0       	ldi	r22, 0x05	; 5
     63a:	81 e0       	ldi	r24, 0x01	; 1
     63c:	0e 94 14 06 	call	0xc28	; 0xc28 <GLCD_SetCursor>
			GLCD_DisplayChar('|');
     640:	8c e7       	ldi	r24, 0x7C	; 124
     642:	0e 94 ce 06 	call	0xd9c	; 0xd9c <GLCD_DisplayChar>
			GLCD_SetCursor(1,6,1);
     646:	41 e0       	ldi	r20, 0x01	; 1
     648:	66 e0       	ldi	r22, 0x06	; 6
     64a:	81 e0       	ldi	r24, 0x01	; 1
     64c:	0e 94 14 06 	call	0xc28	; 0xc28 <GLCD_SetCursor>
			GLCD_DisplayChar('|');
     650:	8c e7       	ldi	r24, 0x7C	; 124
     652:	0e 94 ce 06 	call	0xd9c	; 0xd9c <GLCD_DisplayChar>
			GLCD_SetCursor(1,7,1);
     656:	41 e0       	ldi	r20, 0x01	; 1
     658:	67 e0       	ldi	r22, 0x07	; 7
     65a:	81 e0       	ldi	r24, 0x01	; 1
     65c:	0e 94 14 06 	call	0xc28	; 0xc28 <GLCD_SetCursor>
			GLCD_DisplayChar('|');
     660:	8c e7       	ldi	r24, 0x7C	; 124
     662:	0e 94 ce 06 	call	0xd9c	; 0xd9c <GLCD_DisplayChar>
			GLCD_SetCursor(1,7,6);
     666:	46 e0       	ldi	r20, 0x06	; 6
     668:	67 e0       	ldi	r22, 0x07	; 7
     66a:	81 e0       	ldi	r24, 0x01	; 1
     66c:	0e 94 14 06 	call	0xc28	; 0xc28 <GLCD_SetCursor>
			GLCD_DisplayString("____");
     670:	81 eb       	ldi	r24, 0xB1	; 177
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	0e 94 0e 07 	call	0xe1c	; 0xe1c <GLCD_DisplayString>
			GLCD_SetCursor(1,7,28);
     678:	4c e1       	ldi	r20, 0x1C	; 28
     67a:	67 e0       	ldi	r22, 0x07	; 7
     67c:	81 e0       	ldi	r24, 0x01	; 1
     67e:	0e 94 14 06 	call	0xc28	; 0xc28 <GLCD_SetCursor>
			GLCD_DisplayChar('|');
     682:	8c e7       	ldi	r24, 0x7C	; 124
     684:	0e 94 ce 06 	call	0xd9c	; 0xd9c <GLCD_DisplayChar>
			GLCD_SetCursor(1,6,28);
     688:	4c e1       	ldi	r20, 0x1C	; 28
     68a:	66 e0       	ldi	r22, 0x06	; 6
     68c:	81 e0       	ldi	r24, 0x01	; 1
     68e:	0e 94 14 06 	call	0xc28	; 0xc28 <GLCD_SetCursor>
			GLCD_DisplayChar('|');
     692:	8c e7       	ldi	r24, 0x7C	; 124
     694:	0e 94 ce 06 	call	0xd9c	; 0xd9c <GLCD_DisplayChar>
			GLCD_SetCursor(1,5,28);
     698:	4c e1       	ldi	r20, 0x1C	; 28
     69a:	65 e0       	ldi	r22, 0x05	; 5
     69c:	81 e0       	ldi	r24, 0x01	; 1
     69e:	0e 94 14 06 	call	0xc28	; 0xc28 <GLCD_SetCursor>
			GLCD_DisplayChar('|');
     6a2:	8c e7       	ldi	r24, 0x7C	; 124
     6a4:	0e 94 ce 06 	call	0xd9c	; 0xd9c <GLCD_DisplayChar>
			GLCD_SetCursor(1,4,32);
     6a8:	40 e2       	ldi	r20, 0x20	; 32
     6aa:	64 e0       	ldi	r22, 0x04	; 4
     6ac:	81 e0       	ldi	r24, 0x01	; 1
     6ae:	0e 94 14 06 	call	0xc28	; 0xc28 <GLCD_SetCursor>
			GLCD_DisplayString("___");
     6b2:	82 eb       	ldi	r24, 0xB2	; 178
     6b4:	90 e0       	ldi	r25, 0x00	; 0
     6b6:	0e 94 0e 07 	call	0xe1c	; 0xe1c <GLCD_DisplayString>
			GLCD_SetCursor(1,5,48);
     6ba:	40 e3       	ldi	r20, 0x30	; 48
     6bc:	65 e0       	ldi	r22, 0x05	; 5
     6be:	81 e0       	ldi	r24, 0x01	; 1
     6c0:	0e 94 14 06 	call	0xc28	; 0xc28 <GLCD_SetCursor>
			GLCD_DisplayChar('|');
     6c4:	8c e7       	ldi	r24, 0x7C	; 124
     6c6:	0e 94 ce 06 	call	0xd9c	; 0xd9c <GLCD_DisplayChar>
			GLCD_SetCursor(1,6,48);
     6ca:	40 e3       	ldi	r20, 0x30	; 48
     6cc:	66 e0       	ldi	r22, 0x06	; 6
     6ce:	81 e0       	ldi	r24, 0x01	; 1
     6d0:	0e 94 14 06 	call	0xc28	; 0xc28 <GLCD_SetCursor>
			GLCD_DisplayChar('|');
     6d4:	8c e7       	ldi	r24, 0x7C	; 124
     6d6:	0e 94 ce 06 	call	0xd9c	; 0xd9c <GLCD_DisplayChar>
			GLCD_SetCursor(1,7,48);
     6da:	40 e3       	ldi	r20, 0x30	; 48
     6dc:	67 e0       	ldi	r22, 0x07	; 7
     6de:	81 e0       	ldi	r24, 0x01	; 1
     6e0:	0e 94 14 06 	call	0xc28	; 0xc28 <GLCD_SetCursor>
			GLCD_DisplayChar('|');
     6e4:	8c e7       	ldi	r24, 0x7C	; 124
     6e6:	0e 94 ce 06 	call	0xd9c	; 0xd9c <GLCD_DisplayChar>
			GLCD_SetCursor(1,7,53);
     6ea:	45 e3       	ldi	r20, 0x35	; 53
     6ec:	67 e0       	ldi	r22, 0x07	; 7
     6ee:	81 e0       	ldi	r24, 0x01	; 1
     6f0:	0e 94 14 06 	call	0xc28	; 0xc28 <GLCD_SetCursor>
			GLCD_DisplayChar('_');
     6f4:	8f e5       	ldi	r24, 0x5F	; 95
     6f6:	0e 94 ce 06 	call	0xd9c	; 0xd9c <GLCD_DisplayChar>
			GLCD_DisplayChar('_');
     6fa:	8f e5       	ldi	r24, 0x5F	; 95
     6fc:	0e 94 ce 06 	call	0xd9c	; 0xd9c <GLCD_DisplayChar>
     700:	08 95       	ret
		}
		else if (temp >=49 && temp<=50 )
     702:	9f ec       	ldi	r25, 0xCF	; 207
     704:	98 0f       	add	r25, r24
     706:	92 30       	cpi	r25, 0x02	; 2
     708:	08 f0       	brcs	.+2      	; 0x70c <Drawing_WAVEFORM+0x2f2>
     70a:	8a c0       	rjmp	.+276    	; 0x820 <__DATA_REGION_LENGTH__+0x20>
		{
			
			GLCD_GoToLine(4);
     70c:	84 e0       	ldi	r24, 0x04	; 4
     70e:	0e 94 59 06 	call	0xcb2	; 0xcb2 <GLCD_GoToLine>
			GLCD_DisplayChar('_');
     712:	8f e5       	ldi	r24, 0x5F	; 95
     714:	0e 94 ce 06 	call	0xd9c	; 0xd9c <GLCD_DisplayChar>
			GLCD_DisplayChar('_');
     718:	8f e5       	ldi	r24, 0x5F	; 95
     71a:	0e 94 ce 06 	call	0xd9c	; 0xd9c <GLCD_DisplayChar>
			GLCD_DisplayChar('_');
     71e:	8f e5       	ldi	r24, 0x5F	; 95
     720:	0e 94 ce 06 	call	0xd9c	; 0xd9c <GLCD_DisplayChar>
			GLCD_DisplayChar('_');
     724:	8f e5       	ldi	r24, 0x5F	; 95
     726:	0e 94 ce 06 	call	0xd9c	; 0xd9c <GLCD_DisplayChar>
			GLCD_DisplayChar('_');
     72a:	8f e5       	ldi	r24, 0x5F	; 95
     72c:	0e 94 ce 06 	call	0xd9c	; 0xd9c <GLCD_DisplayChar>
			GLCD_GoToLine(5);
     730:	85 e0       	ldi	r24, 0x05	; 5
     732:	0e 94 59 06 	call	0xcb2	; 0xcb2 <GLCD_GoToLine>
			GLCD_DisplayString("      |");
     736:	86 eb       	ldi	r24, 0xB6	; 182
     738:	90 e0       	ldi	r25, 0x00	; 0
     73a:	0e 94 0e 07 	call	0xe1c	; 0xe1c <GLCD_DisplayString>
			GLCD_GoToLine(6);
     73e:	86 e0       	ldi	r24, 0x06	; 6
     740:	0e 94 59 06 	call	0xcb2	; 0xcb2 <GLCD_GoToLine>
			GLCD_DisplayString("      |");
     744:	86 eb       	ldi	r24, 0xB6	; 182
     746:	90 e0       	ldi	r25, 0x00	; 0
     748:	0e 94 0e 07 	call	0xe1c	; 0xe1c <GLCD_DisplayString>
			GLCD_GoToLine(7);
     74c:	87 e0       	ldi	r24, 0x07	; 7
     74e:	0e 94 59 06 	call	0xcb2	; 0xcb2 <GLCD_GoToLine>
			GLCD_DisplayString("      |");
     752:	86 eb       	ldi	r24, 0xB6	; 182
     754:	90 e0       	ldi	r25, 0x00	; 0
     756:	0e 94 0e 07 	call	0xe1c	; 0xe1c <GLCD_DisplayString>
			GLCD_DisplayChar('_');
     75a:	8f e5       	ldi	r24, 0x5F	; 95
     75c:	0e 94 ce 06 	call	0xd9c	; 0xd9c <GLCD_DisplayChar>
			GLCD_DisplayChar('_');
     760:	8f e5       	ldi	r24, 0x5F	; 95
     762:	0e 94 ce 06 	call	0xd9c	; 0xd9c <GLCD_DisplayChar>
			GLCD_DisplayChar('_');
     766:	8f e5       	ldi	r24, 0x5F	; 95
     768:	0e 94 ce 06 	call	0xd9c	; 0xd9c <GLCD_DisplayChar>
			GLCD_DisplayChar('_');
     76c:	8f e5       	ldi	r24, 0x5F	; 95
     76e:	0e 94 ce 06 	call	0xd9c	; 0xd9c <GLCD_DisplayChar>
			GLCD_DisplayChar('_');
     772:	8f e5       	ldi	r24, 0x5F	; 95
     774:	0e 94 ce 06 	call	0xd9c	; 0xd9c <GLCD_DisplayChar>
			GLCD_DisplayString("|");
     778:	8c eb       	ldi	r24, 0xBC	; 188
     77a:	90 e0       	ldi	r25, 0x00	; 0
     77c:	0e 94 0e 07 	call	0xe1c	; 0xe1c <GLCD_DisplayString>
			GLCD_SetCursor(1,6,2);
     780:	42 e0       	ldi	r20, 0x02	; 2
     782:	66 e0       	ldi	r22, 0x06	; 6
     784:	81 e0       	ldi	r24, 0x01	; 1
     786:	0e 94 14 06 	call	0xc28	; 0xc28 <GLCD_SetCursor>
			GLCD_DisplayString("|");
     78a:	8c eb       	ldi	r24, 0xBC	; 188
     78c:	90 e0       	ldi	r25, 0x00	; 0
     78e:	0e 94 0e 07 	call	0xe1c	; 0xe1c <GLCD_DisplayString>
			GLCD_SetCursor(1,5,2);
     792:	42 e0       	ldi	r20, 0x02	; 2
     794:	65 e0       	ldi	r22, 0x05	; 5
     796:	81 e0       	ldi	r24, 0x01	; 1
     798:	0e 94 14 06 	call	0xc28	; 0xc28 <GLCD_SetCursor>
			GLCD_DisplayString("|");
     79c:	8c eb       	ldi	r24, 0xBC	; 188
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	0e 94 0e 07 	call	0xe1c	; 0xe1c <GLCD_DisplayString>
			GLCD_SetCursor(1,4,7);
     7a4:	47 e0       	ldi	r20, 0x07	; 7
     7a6:	64 e0       	ldi	r22, 0x04	; 4
     7a8:	81 e0       	ldi	r24, 0x01	; 1
     7aa:	0e 94 14 06 	call	0xc28	; 0xc28 <GLCD_SetCursor>
			GLCD_DisplayChar('_');
     7ae:	8f e5       	ldi	r24, 0x5F	; 95
     7b0:	0e 94 ce 06 	call	0xd9c	; 0xd9c <GLCD_DisplayChar>
			GLCD_DisplayChar('_');
     7b4:	8f e5       	ldi	r24, 0x5F	; 95
     7b6:	0e 94 ce 06 	call	0xd9c	; 0xd9c <GLCD_DisplayChar>
			GLCD_DisplayChar('_');
     7ba:	8f e5       	ldi	r24, 0x5F	; 95
     7bc:	0e 94 ce 06 	call	0xd9c	; 0xd9c <GLCD_DisplayChar>
			GLCD_DisplayChar('_');
     7c0:	8f e5       	ldi	r24, 0x5F	; 95
     7c2:	0e 94 ce 06 	call	0xd9c	; 0xd9c <GLCD_DisplayChar>
			GLCD_DisplayChar('_');
     7c6:	8f e5       	ldi	r24, 0x5F	; 95
     7c8:	0e 94 ce 06 	call	0xd9c	; 0xd9c <GLCD_DisplayChar>
			GLCD_SetCursor(1,5,35);
     7cc:	43 e2       	ldi	r20, 0x23	; 35
     7ce:	65 e0       	ldi	r22, 0x05	; 5
     7d0:	81 e0       	ldi	r24, 0x01	; 1
     7d2:	0e 94 14 06 	call	0xc28	; 0xc28 <GLCD_SetCursor>
			GLCD_DisplayChar('|');
     7d6:	8c e7       	ldi	r24, 0x7C	; 124
     7d8:	0e 94 ce 06 	call	0xd9c	; 0xd9c <GLCD_DisplayChar>
			GLCD_SetCursor(1,6,35);
     7dc:	43 e2       	ldi	r20, 0x23	; 35
     7de:	66 e0       	ldi	r22, 0x06	; 6
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	0e 94 14 06 	call	0xc28	; 0xc28 <GLCD_SetCursor>
			GLCD_DisplayChar('|');
     7e6:	8c e7       	ldi	r24, 0x7C	; 124
     7e8:	0e 94 ce 06 	call	0xd9c	; 0xd9c <GLCD_DisplayChar>
			GLCD_SetCursor(1,7,35);
     7ec:	43 e2       	ldi	r20, 0x23	; 35
     7ee:	67 e0       	ldi	r22, 0x07	; 7
     7f0:	81 e0       	ldi	r24, 0x01	; 1
     7f2:	0e 94 14 06 	call	0xc28	; 0xc28 <GLCD_SetCursor>
			GLCD_DisplayChar('|');
     7f6:	8c e7       	ldi	r24, 0x7C	; 124
     7f8:	0e 94 ce 06 	call	0xd9c	; 0xd9c <GLCD_DisplayChar>
			GLCD_SetCursor(1,7,40);
     7fc:	48 e2       	ldi	r20, 0x28	; 40
     7fe:	67 e0       	ldi	r22, 0x07	; 7
     800:	81 e0       	ldi	r24, 0x01	; 1
     802:	0e 94 14 06 	call	0xc28	; 0xc28 <GLCD_SetCursor>
			GLCD_DisplayChar('_');
     806:	8f e5       	ldi	r24, 0x5F	; 95
     808:	0e 94 ce 06 	call	0xd9c	; 0xd9c <GLCD_DisplayChar>
			GLCD_DisplayChar('_');
     80c:	8f e5       	ldi	r24, 0x5F	; 95
     80e:	0e 94 ce 06 	call	0xd9c	; 0xd9c <GLCD_DisplayChar>
			GLCD_DisplayChar('_');
     812:	8f e5       	ldi	r24, 0x5F	; 95
     814:	0e 94 ce 06 	call	0xd9c	; 0xd9c <GLCD_DisplayChar>
			GLCD_DisplayChar('_');
     818:	8f e5       	ldi	r24, 0x5F	; 95
     81a:	0e 94 ce 06 	call	0xd9c	; 0xd9c <GLCD_DisplayChar>
     81e:	08 95       	ret
			
		}
		else if (temp >50 && temp<=75){
     820:	9d ec       	ldi	r25, 0xCD	; 205
     822:	98 0f       	add	r25, r24
     824:	99 31       	cpi	r25, 0x19	; 25
     826:	08 f0       	brcs	.+2      	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
     828:	8c c0       	rjmp	.+280    	; 0x942 <__stack+0xe3>
			GLCD_GoToLine(4);
     82a:	84 e0       	ldi	r24, 0x04	; 4
     82c:	0e 94 59 06 	call	0xcb2	; 0xcb2 <GLCD_GoToLine>
			GLCD_DisplayString("______");
     830:	8f ea       	ldi	r24, 0xAF	; 175
     832:	90 e0       	ldi	r25, 0x00	; 0
     834:	0e 94 0e 07 	call	0xe1c	; 0xe1c <GLCD_DisplayString>
			GLCD_SetCursor(0,5,32);
     838:	40 e2       	ldi	r20, 0x20	; 32
     83a:	65 e0       	ldi	r22, 0x05	; 5
     83c:	80 e0       	ldi	r24, 0x00	; 0
     83e:	0e 94 14 06 	call	0xc28	; 0xc28 <GLCD_SetCursor>
			GLCD_DisplayChar('|');
     842:	8c e7       	ldi	r24, 0x7C	; 124
     844:	0e 94 ce 06 	call	0xd9c	; 0xd9c <GLCD_DisplayChar>
			GLCD_SetCursor(0,6,32);
     848:	40 e2       	ldi	r20, 0x20	; 32
     84a:	66 e0       	ldi	r22, 0x06	; 6
     84c:	80 e0       	ldi	r24, 0x00	; 0
     84e:	0e 94 14 06 	call	0xc28	; 0xc28 <GLCD_SetCursor>
			GLCD_DisplayChar('|');
     852:	8c e7       	ldi	r24, 0x7C	; 124
     854:	0e 94 ce 06 	call	0xd9c	; 0xd9c <GLCD_DisplayChar>
			GLCD_SetCursor(0,7,32);
     858:	40 e2       	ldi	r20, 0x20	; 32
     85a:	67 e0       	ldi	r22, 0x07	; 7
     85c:	80 e0       	ldi	r24, 0x00	; 0
     85e:	0e 94 14 06 	call	0xc28	; 0xc28 <GLCD_SetCursor>
			GLCD_DisplayChar('|');
     862:	8c e7       	ldi	r24, 0x7C	; 124
     864:	0e 94 ce 06 	call	0xd9c	; 0xd9c <GLCD_DisplayChar>
			GLCD_SetCursor(0,7,36);
     868:	44 e2       	ldi	r20, 0x24	; 36
     86a:	67 e0       	ldi	r22, 0x07	; 7
     86c:	80 e0       	ldi	r24, 0x00	; 0
     86e:	0e 94 14 06 	call	0xc28	; 0xc28 <GLCD_SetCursor>
			GLCD_DisplayString("___");
     872:	82 eb       	ldi	r24, 0xB2	; 178
     874:	90 e0       	ldi	r25, 0x00	; 0
     876:	0e 94 0e 07 	call	0xe1c	; 0xe1c <GLCD_DisplayString>
			GLCD_SetCursor(0,7,52);
     87a:	44 e3       	ldi	r20, 0x34	; 52
     87c:	67 e0       	ldi	r22, 0x07	; 7
     87e:	80 e0       	ldi	r24, 0x00	; 0
     880:	0e 94 14 06 	call	0xc28	; 0xc28 <GLCD_SetCursor>
			GLCD_DisplayChar('|');
     884:	8c e7       	ldi	r24, 0x7C	; 124
     886:	0e 94 ce 06 	call	0xd9c	; 0xd9c <GLCD_DisplayChar>
			GLCD_SetCursor(0,6,52);
     88a:	44 e3       	ldi	r20, 0x34	; 52
     88c:	66 e0       	ldi	r22, 0x06	; 6
     88e:	80 e0       	ldi	r24, 0x00	; 0
     890:	0e 94 14 06 	call	0xc28	; 0xc28 <GLCD_SetCursor>
			GLCD_DisplayChar('|');
     894:	8c e7       	ldi	r24, 0x7C	; 124
     896:	0e 94 ce 06 	call	0xd9c	; 0xd9c <GLCD_DisplayChar>
			GLCD_SetCursor(0,5,52);
     89a:	44 e3       	ldi	r20, 0x34	; 52
     89c:	65 e0       	ldi	r22, 0x05	; 5
     89e:	80 e0       	ldi	r24, 0x00	; 0
     8a0:	0e 94 14 06 	call	0xc28	; 0xc28 <GLCD_SetCursor>
			GLCD_DisplayChar('|');
     8a4:	8c e7       	ldi	r24, 0x7C	; 124
     8a6:	0e 94 ce 06 	call	0xd9c	; 0xd9c <GLCD_DisplayChar>
			GLCD_SetCursor(0,4,56);
     8aa:	48 e3       	ldi	r20, 0x38	; 56
     8ac:	64 e0       	ldi	r22, 0x04	; 4
     8ae:	80 e0       	ldi	r24, 0x00	; 0
     8b0:	0e 94 14 06 	call	0xc28	; 0xc28 <GLCD_SetCursor>
			GLCD_DisplayString("______");
     8b4:	8f ea       	ldi	r24, 0xAF	; 175
     8b6:	90 e0       	ldi	r25, 0x00	; 0
     8b8:	0e 94 0e 07 	call	0xe1c	; 0xe1c <GLCD_DisplayString>
			GLCD_SetCursor(1,5,26);
     8bc:	4a e1       	ldi	r20, 0x1A	; 26
     8be:	65 e0       	ldi	r22, 0x05	; 5
     8c0:	81 e0       	ldi	r24, 0x01	; 1
     8c2:	0e 94 14 06 	call	0xc28	; 0xc28 <GLCD_SetCursor>
			GLCD_DisplayChar('|');
     8c6:	8c e7       	ldi	r24, 0x7C	; 124
     8c8:	0e 94 ce 06 	call	0xd9c	; 0xd9c <GLCD_DisplayChar>
			GLCD_SetCursor(1,6,26);
     8cc:	4a e1       	ldi	r20, 0x1A	; 26
     8ce:	66 e0       	ldi	r22, 0x06	; 6
     8d0:	81 e0       	ldi	r24, 0x01	; 1
     8d2:	0e 94 14 06 	call	0xc28	; 0xc28 <GLCD_SetCursor>
			GLCD_DisplayChar('|');
     8d6:	8c e7       	ldi	r24, 0x7C	; 124
     8d8:	0e 94 ce 06 	call	0xd9c	; 0xd9c <GLCD_DisplayChar>
			GLCD_SetCursor(1,7,26);
     8dc:	4a e1       	ldi	r20, 0x1A	; 26
     8de:	67 e0       	ldi	r22, 0x07	; 7
     8e0:	81 e0       	ldi	r24, 0x01	; 1
     8e2:	0e 94 14 06 	call	0xc28	; 0xc28 <GLCD_SetCursor>
			GLCD_DisplayChar('|');
     8e6:	8c e7       	ldi	r24, 0x7C	; 124
     8e8:	0e 94 ce 06 	call	0xd9c	; 0xd9c <GLCD_DisplayChar>
			GLCD_SetCursor(1,7,30);
     8ec:	4e e1       	ldi	r20, 0x1E	; 30
     8ee:	67 e0       	ldi	r22, 0x07	; 7
     8f0:	81 e0       	ldi	r24, 0x01	; 1
     8f2:	0e 94 14 06 	call	0xc28	; 0xc28 <GLCD_SetCursor>
			GLCD_DisplayString("___");
     8f6:	82 eb       	ldi	r24, 0xB2	; 178
     8f8:	90 e0       	ldi	r25, 0x00	; 0
     8fa:	0e 94 0e 07 	call	0xe1c	; 0xe1c <GLCD_DisplayString>
			GLCD_SetCursor(1,7,46);
     8fe:	4e e2       	ldi	r20, 0x2E	; 46
     900:	67 e0       	ldi	r22, 0x07	; 7
     902:	81 e0       	ldi	r24, 0x01	; 1
     904:	0e 94 14 06 	call	0xc28	; 0xc28 <GLCD_SetCursor>
			GLCD_DisplayChar('|');
     908:	8c e7       	ldi	r24, 0x7C	; 124
     90a:	0e 94 ce 06 	call	0xd9c	; 0xd9c <GLCD_DisplayChar>
			GLCD_SetCursor(1,6,46);
     90e:	4e e2       	ldi	r20, 0x2E	; 46
     910:	66 e0       	ldi	r22, 0x06	; 6
     912:	81 e0       	ldi	r24, 0x01	; 1
     914:	0e 94 14 06 	call	0xc28	; 0xc28 <GLCD_SetCursor>
			GLCD_DisplayChar('|');
     918:	8c e7       	ldi	r24, 0x7C	; 124
     91a:	0e 94 ce 06 	call	0xd9c	; 0xd9c <GLCD_DisplayChar>
			GLCD_SetCursor(1,5,46);
     91e:	4e e2       	ldi	r20, 0x2E	; 46
     920:	65 e0       	ldi	r22, 0x05	; 5
     922:	81 e0       	ldi	r24, 0x01	; 1
     924:	0e 94 14 06 	call	0xc28	; 0xc28 <GLCD_SetCursor>
			GLCD_DisplayChar('|');
     928:	8c e7       	ldi	r24, 0x7C	; 124
     92a:	0e 94 ce 06 	call	0xd9c	; 0xd9c <GLCD_DisplayChar>
			GLCD_SetCursor(1,4,50);
     92e:	42 e3       	ldi	r20, 0x32	; 50
     930:	64 e0       	ldi	r22, 0x04	; 4
     932:	81 e0       	ldi	r24, 0x01	; 1
     934:	0e 94 14 06 	call	0xc28	; 0xc28 <GLCD_SetCursor>
			GLCD_DisplayString("__");
     938:	83 eb       	ldi	r24, 0xB3	; 179
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	0e 94 0e 07 	call	0xe1c	; 0xe1c <GLCD_DisplayString>
     940:	08 95       	ret
		}
		else if (temp >75 && temp<=100){
     942:	8c 54       	subi	r24, 0x4C	; 76
     944:	89 31       	cpi	r24, 0x19	; 25
     946:	38 f4       	brcc	.+14     	; 0x956 <__stack+0xf7>
			GLCD_GoToLine(4);
     948:	84 e0       	ldi	r24, 0x04	; 4
     94a:	0e 94 59 06 	call	0xcb2	; 0xcb2 <GLCD_GoToLine>
			GLCD_DisplayString("_____________________");
     94e:	80 ea       	ldi	r24, 0xA0	; 160
     950:	90 e0       	ldi	r25, 0x00	; 0
     952:	0e 94 0e 07 	call	0xe1c	; 0xe1c <GLCD_DisplayString>
     956:	08 95       	ret

00000958 <main>:
void Drawing_WAVEFORM(Uint8 duty);
int main(void)
{
	Uint8 mode =0,PressCount1=0;
	Uint16 BuiltIN_Freq=0;
	DIO_Init();
     958:	0e 94 cb 07 	call	0xf96	; 0xf96 <DIO_Init>
	GLCD_Init();
     95c:	0e 94 87 06 	call	0xd0e	; 0xd0e <GLCD_Init>
	TIMER0_Init();
     960:	0e 94 71 08 	call	0x10e2	; 0x10e2 <TIMER0_Init>
	Timer1_Init();
     964:	0e 94 b2 08 	call	0x1164	; 0x1164 <Timer1_Init>
	
	
	while(1){
		while (1)
		{
			GLCD_DisplayString("B1 for input Wave");
     968:	8e eb       	ldi	r24, 0xBE	; 190
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	0e 94 0e 07 	call	0xe1c	; 0xe1c <GLCD_DisplayString>
			GLCD_GoToNextLine();
     970:	0e 94 c0 06 	call	0xd80	; 0xd80 <GLCD_GoToNextLine>
			GLCD_DisplayString("B2 For internal Wave");
     974:	80 ed       	ldi	r24, 0xD0	; 208
     976:	90 e0       	ldi	r25, 0x00	; 0
     978:	0e 94 0e 07 	call	0xe1c	; 0xe1c <GLCD_DisplayString>
			GLCD_GoToNextLine();
     97c:	0e 94 c0 06 	call	0xd80	; 0xd80 <GLCD_GoToNextLine>
			GLCD_DisplayString("(Hold Button for 2sec)");
     980:	85 ee       	ldi	r24, 0xE5	; 229
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	0e 94 0e 07 	call	0xe1c	; 0xe1c <GLCD_DisplayString>
			GLCD_GoToNextLine();
     988:	0e 94 c0 06 	call	0xd80	; 0xd80 <GLCD_GoToNextLine>
			GLCD_GoToNextLine();
     98c:	0e 94 c0 06 	call	0xd80	; 0xd80 <GLCD_GoToNextLine>
			GLCD_GoToNextLine();
     990:	0e 94 c0 06 	call	0xd80	; 0xd80 <GLCD_GoToNextLine>
			GLCD_GoToNextLine();
     994:	0e 94 c0 06 	call	0xd80	; 0xd80 <GLCD_GoToNextLine>
			GLCD_DisplayString("Note:MAX Freq is 65KHz");
     998:	8c ef       	ldi	r24, 0xFC	; 252
     99a:	90 e0       	ldi	r25, 0x00	; 0
     99c:	0e 94 0e 07 	call	0xe1c	; 0xe1c <GLCD_DisplayString>
			GLCD_DisplayString("Note:MAX Duty in 98%");
     9a0:	83 e1       	ldi	r24, 0x13	; 19
     9a2:	91 e0       	ldi	r25, 0x01	; 1
     9a4:	0e 94 0e 07 	call	0xe1c	; 0xe1c <GLCD_DisplayString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9a8:	2f ef       	ldi	r18, 0xFF	; 255
     9aa:	89 e6       	ldi	r24, 0x69	; 105
     9ac:	98 e1       	ldi	r25, 0x18	; 24
     9ae:	21 50       	subi	r18, 0x01	; 1
     9b0:	80 40       	sbci	r24, 0x00	; 0
     9b2:	90 40       	sbci	r25, 0x00	; 0
     9b4:	e1 f7       	brne	.-8      	; 0x9ae <main+0x56>
     9b6:	00 c0       	rjmp	.+0      	; 0x9b8 <main+0x60>
     9b8:	00 00       	nop
			_delay_ms(1000);
			if (DIO_ReadChannel(DIO_ChannelB1)==1 && DIO_ReadChannel(DIO_ChannelB2)==0)
     9ba:	89 e0       	ldi	r24, 0x09	; 9
     9bc:	0e 94 93 07 	call	0xf26	; 0xf26 <DIO_ReadChannel>
     9c0:	81 30       	cpi	r24, 0x01	; 1
     9c2:	49 f4       	brne	.+18     	; 0x9d6 <main+0x7e>
     9c4:	8a e0       	ldi	r24, 0x0A	; 10
     9c6:	0e 94 93 07 	call	0xf26	; 0xf26 <DIO_ReadChannel>
     9ca:	81 11       	cpse	r24, r1
     9cc:	04 c0       	rjmp	.+8      	; 0x9d6 <main+0x7e>
			{
				GLCD_Clear();
     9ce:	0e 94 62 06 	call	0xcc4	; 0xcc4 <GLCD_Clear>
				mode=1;
     9d2:	81 e0       	ldi	r24, 0x01	; 1
				break;
     9d4:	0e c0       	rjmp	.+28     	; 0x9f2 <main+0x9a>
				}else if(DIO_ReadChannel(DIO_ChannelB1)==0 && DIO_ReadChannel(DIO_ChannelB2)==1){
     9d6:	89 e0       	ldi	r24, 0x09	; 9
     9d8:	0e 94 93 07 	call	0xf26	; 0xf26 <DIO_ReadChannel>
     9dc:	81 11       	cpse	r24, r1
     9de:	c4 cf       	rjmp	.-120    	; 0x968 <main+0x10>
     9e0:	8a e0       	ldi	r24, 0x0A	; 10
     9e2:	0e 94 93 07 	call	0xf26	; 0xf26 <DIO_ReadChannel>
     9e6:	81 30       	cpi	r24, 0x01	; 1
     9e8:	09 f0       	breq	.+2      	; 0x9ec <main+0x94>
     9ea:	be cf       	rjmp	.-132    	; 0x968 <main+0x10>
				GLCD_Clear();
     9ec:	0e 94 62 06 	call	0xcc4	; 0xcc4 <GLCD_Clear>
				mode=2;
     9f0:	82 e0       	ldi	r24, 0x02	; 2
			}
			
		}
			
		
		if(mode == 1){
     9f2:	81 30       	cpi	r24, 0x01	; 1
     9f4:	09 f0       	breq	.+2      	; 0x9f8 <main+0xa0>
     9f6:	48 c0       	rjmp	.+144    	; 0xa88 <main+0x130>
			while (1)
			{
				Timer1_Input_Capture(&freq,&Duty);
     9f8:	64 e4       	ldi	r22, 0x44	; 68
     9fa:	71 e0       	ldi	r23, 0x01	; 1
     9fc:	86 e4       	ldi	r24, 0x46	; 70
     9fe:	91 e0       	ldi	r25, 0x01	; 1
     a00:	0e 94 bc 08 	call	0x1178	; 0x1178 <Timer1_Input_Capture>
				GLCD_DisplayString("Freq:");
     a04:	88 e2       	ldi	r24, 0x28	; 40
     a06:	91 e0       	ldi	r25, 0x01	; 1
     a08:	0e 94 0e 07 	call	0xe1c	; 0xe1c <GLCD_DisplayString>
				if (freq>65000)
     a0c:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <freq>
     a10:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <freq+0x1>
     a14:	89 3e       	cpi	r24, 0xE9	; 233
     a16:	2d ef       	ldi	r18, 0xFD	; 253
     a18:	92 07       	cpc	r25, r18
     a1a:	28 f0       	brcs	.+10     	; 0xa26 <main+0xce>
				{
					GLCD_DisplayString("Out of Range!!");
     a1c:	8e e2       	ldi	r24, 0x2E	; 46
     a1e:	91 e0       	ldi	r25, 0x01	; 1
     a20:	0e 94 0e 07 	call	0xe1c	; 0xe1c <GLCD_DisplayString>
     a24:	07 c0       	rjmp	.+14     	; 0xa34 <main+0xdc>
				}else{
					GLCD_DisplayDecimalNumber(freq,5);
     a26:	65 e0       	ldi	r22, 0x05	; 5
     a28:	0e 94 1b 07 	call	0xe36	; 0xe36 <GLCD_DisplayDecimalNumber>
					GLCD_DisplayString("Hz");
     a2c:	80 e1       	ldi	r24, 0x10	; 16
     a2e:	91 e0       	ldi	r25, 0x01	; 1
     a30:	0e 94 0e 07 	call	0xe1c	; 0xe1c <GLCD_DisplayString>
				}
				
				
				GLCD_GoToLine(1);
     a34:	81 e0       	ldi	r24, 0x01	; 1
     a36:	0e 94 59 06 	call	0xcb2	; 0xcb2 <GLCD_GoToLine>
				GLCD_DisplayString("Duty:");
     a3a:	8d e3       	ldi	r24, 0x3D	; 61
     a3c:	91 e0       	ldi	r25, 0x01	; 1
     a3e:	0e 94 0e 07 	call	0xe1c	; 0xe1c <GLCD_DisplayString>
				GLCD_DisplayDecimalNumber(Duty,3);
     a42:	63 e0       	ldi	r22, 0x03	; 3
     a44:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <__data_end>
     a48:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <__data_end+0x1>
     a4c:	0e 94 1b 07 	call	0xe36	; 0xe36 <GLCD_DisplayDecimalNumber>
				GLCD_DisplayChar('%');
     a50:	85 e2       	ldi	r24, 0x25	; 37
     a52:	0e 94 ce 06 	call	0xd9c	; 0xd9c <GLCD_DisplayChar>
				Drawing_WAVEFORM(Duty);
     a56:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <__data_end>
     a5a:	0e 94 0d 02 	call	0x41a	; 0x41a <Drawing_WAVEFORM>
     a5e:	8f ef       	ldi	r24, 0xFF	; 255
     a60:	94 e3       	ldi	r25, 0x34	; 52
     a62:	2c e0       	ldi	r18, 0x0C	; 12
     a64:	81 50       	subi	r24, 0x01	; 1
     a66:	90 40       	sbci	r25, 0x00	; 0
     a68:	20 40       	sbci	r18, 0x00	; 0
     a6a:	e1 f7       	brne	.-8      	; 0xa64 <main+0x10c>
     a6c:	00 c0       	rjmp	.+0      	; 0xa6e <main+0x116>
     a6e:	00 00       	nop
     a70:	8f ef       	ldi	r24, 0xFF	; 255
     a72:	94 e3       	ldi	r25, 0x34	; 52
     a74:	2c e0       	ldi	r18, 0x0C	; 12
     a76:	81 50       	subi	r24, 0x01	; 1
     a78:	90 40       	sbci	r25, 0x00	; 0
     a7a:	20 40       	sbci	r18, 0x00	; 0
     a7c:	e1 f7       	brne	.-8      	; 0xa76 <main+0x11e>
     a7e:	00 c0       	rjmp	.+0      	; 0xa80 <main+0x128>
     a80:	00 00       	nop
				_delay_ms(500);
				
				_delay_ms(500);
				GLCD_Clear();
     a82:	0e 94 62 06 	call	0xcc4	; 0xcc4 <GLCD_Clear>
			}	
     a86:	b8 cf       	rjmp	.-144    	; 0x9f8 <main+0xa0>
		}
		else if(mode ==2) 
     a88:	82 30       	cpi	r24, 0x02	; 2
     a8a:	09 f0       	breq	.+2      	; 0xa8e <main+0x136>
     a8c:	6d cf       	rjmp	.-294    	; 0x968 <main+0x10>
     a8e:	c0 e0       	ldi	r28, 0x00	; 0
		{
			PressCount1=0;
			while(1){
				if (DIO_ReadChannel(DIO_ChannelB4)==1)
     a90:	8c e0       	ldi	r24, 0x0C	; 12
     a92:	0e 94 93 07 	call	0xf26	; 0xf26 <DIO_ReadChannel>
     a96:	81 30       	cpi	r24, 0x01	; 1
     a98:	51 f4       	brne	.+20     	; 0xaae <main+0x156>
				{
					PressCount1++;
     a9a:	cf 5f       	subi	r28, 0xFF	; 255
     a9c:	8f ef       	ldi	r24, 0xFF	; 255
     a9e:	99 e6       	ldi	r25, 0x69	; 105
     aa0:	28 e1       	ldi	r18, 0x18	; 24
     aa2:	81 50       	subi	r24, 0x01	; 1
     aa4:	90 40       	sbci	r25, 0x00	; 0
     aa6:	20 40       	sbci	r18, 0x00	; 0
     aa8:	e1 f7       	brne	.-8      	; 0xaa2 <main+0x14a>
     aaa:	00 c0       	rjmp	.+0      	; 0xaac <main+0x154>
     aac:	00 00       	nop
					_delay_ms(1000);
				}
				if (DIO_ReadChannel(DIO_ChannelB5) == 1)
     aae:	8d e0       	ldi	r24, 0x0D	; 13
     ab0:	0e 94 93 07 	call	0xf26	; 0xf26 <DIO_ReadChannel>
     ab4:	81 30       	cpi	r24, 0x01	; 1
     ab6:	e9 f4       	brne	.+58     	; 0xaf2 <main+0x19a>
				{
					if (Duty>=100)
     ab8:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <__data_end>
     abc:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <__data_end+0x1>
     ac0:	84 36       	cpi	r24, 0x64	; 100
     ac2:	91 05       	cpc	r25, r1
     ac4:	20 f0       	brcs	.+8      	; 0xace <main+0x176>
					{
						Duty=0;
     ac6:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <__data_end+0x1>
     aca:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <__data_end>
					}
					Duty +=25;
     ace:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <__data_end>
     ad2:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <__data_end+0x1>
     ad6:	49 96       	adiw	r24, 0x19	; 25
     ad8:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <__data_end+0x1>
     adc:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <__data_end>
     ae0:	8f ef       	ldi	r24, 0xFF	; 255
     ae2:	96 e1       	ldi	r25, 0x16	; 22
     ae4:	21 e1       	ldi	r18, 0x11	; 17
     ae6:	81 50       	subi	r24, 0x01	; 1
     ae8:	90 40       	sbci	r25, 0x00	; 0
     aea:	20 40       	sbci	r18, 0x00	; 0
     aec:	e1 f7       	brne	.-8      	; 0xae6 <main+0x18e>
     aee:	00 c0       	rjmp	.+0      	; 0xaf0 <main+0x198>
     af0:	00 00       	nop
					_delay_ms(700);
					//GLCD_Clear();
				}
				switch(PressCount1){
     af2:	c2 30       	cpi	r28, 0x02	; 2
     af4:	59 f0       	breq	.+22     	; 0xb0c <main+0x1b4>
     af6:	18 f4       	brcc	.+6      	; 0xafe <main+0x1a6>
     af8:	c1 30       	cpi	r28, 0x01	; 1
     afa:	89 f0       	breq	.+34     	; 0xb1e <main+0x1c6>
     afc:	04 c0       	rjmp	.+8      	; 0xb06 <main+0x1ae>
     afe:	c3 30       	cpi	r28, 0x03	; 3
     b00:	41 f0       	breq	.+16     	; 0xb12 <main+0x1ba>
     b02:	c4 30       	cpi	r28, 0x04	; 4
     b04:	49 f0       	breq	.+18     	; 0xb18 <main+0x1c0>
					case 0 :
					BuiltIN_Freq=61;
     b06:	0d e3       	ldi	r16, 0x3D	; 61
     b08:	10 e0       	ldi	r17, 0x00	; 0
     b0a:	0b c0       	rjmp	.+22     	; 0xb22 <main+0x1ca>
					break;
					case  1 :
					BuiltIN_Freq=244;
					break;
					case 2:
					BuiltIN_Freq=976;
     b0c:	00 ed       	ldi	r16, 0xD0	; 208
     b0e:	13 e0       	ldi	r17, 0x03	; 3
					break;
     b10:	08 c0       	rjmp	.+16     	; 0xb22 <main+0x1ca>
					case 3 :
					BuiltIN_Freq=7812;
     b12:	04 e8       	ldi	r16, 0x84	; 132
     b14:	1e e1       	ldi	r17, 0x1E	; 30
					break;
     b16:	05 c0       	rjmp	.+10     	; 0xb22 <main+0x1ca>
					case 4 :
					BuiltIN_Freq=62500;
     b18:	04 e2       	ldi	r16, 0x24	; 36
     b1a:	14 ef       	ldi	r17, 0xF4	; 244
					break;
     b1c:	02 c0       	rjmp	.+4      	; 0xb22 <main+0x1ca>
				switch(PressCount1){
					case 0 :
					BuiltIN_Freq=61;
					break;
					case  1 :
					BuiltIN_Freq=244;
     b1e:	04 ef       	ldi	r16, 0xF4	; 244
     b20:	10 e0       	ldi	r17, 0x00	; 0
					default:
					BuiltIN_Freq=61;
					break;
				}
				
			    TIMER0_PWM(BuiltIN_Freq,Duty);
     b22:	60 91 44 01 	lds	r22, 0x0144	; 0x800144 <__data_end>
     b26:	c8 01       	movw	r24, r16
     b28:	0e 94 75 08 	call	0x10ea	; 0x10ea <TIMER0_PWM>
				
				GLCD_DisplayString("Freq:");
     b2c:	88 e2       	ldi	r24, 0x28	; 40
     b2e:	91 e0       	ldi	r25, 0x01	; 1
     b30:	0e 94 0e 07 	call	0xe1c	; 0xe1c <GLCD_DisplayString>
				if (freq>65000)
     b34:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <freq>
     b38:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <freq+0x1>
     b3c:	89 3e       	cpi	r24, 0xE9	; 233
     b3e:	9d 4f       	sbci	r25, 0xFD	; 253
     b40:	28 f0       	brcs	.+10     	; 0xb4c <main+0x1f4>
				{
					GLCD_DisplayString("Out of Range!!");
     b42:	8e e2       	ldi	r24, 0x2E	; 46
     b44:	91 e0       	ldi	r25, 0x01	; 1
     b46:	0e 94 0e 07 	call	0xe1c	; 0xe1c <GLCD_DisplayString>
     b4a:	08 c0       	rjmp	.+16     	; 0xb5c <main+0x204>
					}else{
					GLCD_DisplayDecimalNumber(BuiltIN_Freq,5);
     b4c:	65 e0       	ldi	r22, 0x05	; 5
     b4e:	c8 01       	movw	r24, r16
     b50:	0e 94 1b 07 	call	0xe36	; 0xe36 <GLCD_DisplayDecimalNumber>
					GLCD_DisplayString("Hz");
     b54:	80 e1       	ldi	r24, 0x10	; 16
     b56:	91 e0       	ldi	r25, 0x01	; 1
     b58:	0e 94 0e 07 	call	0xe1c	; 0xe1c <GLCD_DisplayString>
				}
				GLCD_GoToLine(1);
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	0e 94 59 06 	call	0xcb2	; 0xcb2 <GLCD_GoToLine>
				GLCD_DisplayString("Duty:");
     b62:	8d e3       	ldi	r24, 0x3D	; 61
     b64:	91 e0       	ldi	r25, 0x01	; 1
     b66:	0e 94 0e 07 	call	0xe1c	; 0xe1c <GLCD_DisplayString>
				GLCD_DisplayDecimalNumber(Duty,3);
     b6a:	63 e0       	ldi	r22, 0x03	; 3
     b6c:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <__data_end>
     b70:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <__data_end+0x1>
     b74:	0e 94 1b 07 	call	0xe36	; 0xe36 <GLCD_DisplayDecimalNumber>
				GLCD_DisplayChar('%');
     b78:	85 e2       	ldi	r24, 0x25	; 37
     b7a:	0e 94 ce 06 	call	0xd9c	; 0xd9c <GLCD_DisplayChar>
				
				Drawing_WAVEFORM(Duty);
     b7e:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <__data_end>
     b82:	0e 94 0d 02 	call	0x41a	; 0x41a <Drawing_WAVEFORM>
     b86:	8f ef       	ldi	r24, 0xFF	; 255
     b88:	92 e5       	ldi	r25, 0x52	; 82
     b8a:	27 e0       	ldi	r18, 0x07	; 7
     b8c:	81 50       	subi	r24, 0x01	; 1
     b8e:	90 40       	sbci	r25, 0x00	; 0
     b90:	20 40       	sbci	r18, 0x00	; 0
     b92:	e1 f7       	brne	.-8      	; 0xb8c <main+0x234>
     b94:	00 c0       	rjmp	.+0      	; 0xb96 <main+0x23e>
     b96:	00 00       	nop
				_delay_ms(300);
				GLCD_Clear();
     b98:	0e 94 62 06 	call	0xcc4	; 0xcc4 <GLCD_Clear>
			}
     b9c:	79 cf       	rjmp	.-270    	; 0xa90 <main+0x138>

00000b9e <glcd_SelectPage0>:
{
	GLCD.Invertdisplay = 0xff;
}
void GLCD_DisableDisplayInversion()
{
	GLCD.Invertdisplay = 0x00;
     b9e:	85 b3       	in	r24, 0x15	; 21
     ba0:	80 62       	ori	r24, 0x20	; 32
     ba2:	85 bb       	out	0x15, r24	; 21
     ba4:	85 b3       	in	r24, 0x15	; 21
     ba6:	8f 7e       	andi	r24, 0xEF	; 239
     ba8:	85 bb       	out	0x15, r24	; 21
     baa:	08 95       	ret

00000bac <glcd_SelectPage1>:
     bac:	85 b3       	in	r24, 0x15	; 21
     bae:	80 61       	ori	r24, 0x10	; 16
     bb0:	85 bb       	out	0x15, r24	; 21
     bb2:	85 b3       	in	r24, 0x15	; 21
     bb4:	8f 7d       	andi	r24, 0xDF	; 223
     bb6:	85 bb       	out	0x15, r24	; 21
     bb8:	08 95       	ret

00000bba <glcd_CmdWrite>:
     bba:	8b bb       	out	0x1b, r24	; 27
     bbc:	85 b3       	in	r24, 0x15	; 21
     bbe:	8b 7f       	andi	r24, 0xFB	; 251
     bc0:	85 bb       	out	0x15, r24	; 21
     bc2:	85 b3       	in	r24, 0x15	; 21
     bc4:	8d 7f       	andi	r24, 0xFD	; 253
     bc6:	85 bb       	out	0x15, r24	; 21
     bc8:	85 b3       	in	r24, 0x15	; 21
     bca:	81 60       	ori	r24, 0x01	; 1
     bcc:	85 bb       	out	0x15, r24	; 21
     bce:	85 e0       	ldi	r24, 0x05	; 5
     bd0:	8a 95       	dec	r24
     bd2:	f1 f7       	brne	.-4      	; 0xbd0 <glcd_CmdWrite+0x16>
     bd4:	00 00       	nop
     bd6:	85 b3       	in	r24, 0x15	; 21
     bd8:	8e 7f       	andi	r24, 0xFE	; 254
     bda:	85 bb       	out	0x15, r24	; 21
     bdc:	85 e0       	ldi	r24, 0x05	; 5
     bde:	8a 95       	dec	r24
     be0:	f1 f7       	brne	.-4      	; 0xbde <glcd_CmdWrite+0x24>
     be2:	00 00       	nop
     be4:	8a e1       	ldi	r24, 0x1A	; 26
     be6:	8a 95       	dec	r24
     be8:	f1 f7       	brne	.-4      	; 0xbe6 <glcd_CmdWrite+0x2c>
     bea:	00 c0       	rjmp	.+0      	; 0xbec <glcd_CmdWrite+0x32>
     bec:	08 95       	ret

00000bee <glcd_DataWrite>:
     bee:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <GLCD+0x3>
     bf2:	89 27       	eor	r24, r25
     bf4:	8b bb       	out	0x1b, r24	; 27
     bf6:	85 b3       	in	r24, 0x15	; 21
     bf8:	84 60       	ori	r24, 0x04	; 4
     bfa:	85 bb       	out	0x15, r24	; 21
     bfc:	85 b3       	in	r24, 0x15	; 21
     bfe:	8d 7f       	andi	r24, 0xFD	; 253
     c00:	85 bb       	out	0x15, r24	; 21
     c02:	85 b3       	in	r24, 0x15	; 21
     c04:	81 60       	ori	r24, 0x01	; 1
     c06:	85 bb       	out	0x15, r24	; 21
     c08:	85 e0       	ldi	r24, 0x05	; 5
     c0a:	8a 95       	dec	r24
     c0c:	f1 f7       	brne	.-4      	; 0xc0a <glcd_DataWrite+0x1c>
     c0e:	00 00       	nop
     c10:	85 b3       	in	r24, 0x15	; 21
     c12:	8e 7f       	andi	r24, 0xFE	; 254
     c14:	85 bb       	out	0x15, r24	; 21
     c16:	85 e0       	ldi	r24, 0x05	; 5
     c18:	8a 95       	dec	r24
     c1a:	f1 f7       	brne	.-4      	; 0xc18 <glcd_DataWrite+0x2a>
     c1c:	00 00       	nop
     c1e:	8a e1       	ldi	r24, 0x1A	; 26
     c20:	8a 95       	dec	r24
     c22:	f1 f7       	brne	.-4      	; 0xc20 <glcd_DataWrite+0x32>
     c24:	00 c0       	rjmp	.+0      	; 0xc26 <glcd_DataWrite+0x38>
     c26:	08 95       	ret

00000c28 <GLCD_SetCursor>:
     c28:	ff 92       	push	r15
     c2a:	0f 93       	push	r16
     c2c:	1f 93       	push	r17
     c2e:	cf 93       	push	r28
     c30:	df 93       	push	r29
     c32:	82 30       	cpi	r24, 0x02	; 2
     c34:	e0 f4       	brcc	.+56     	; 0xc6e <GLCD_SetCursor+0x46>
     c36:	68 30       	cpi	r22, 0x08	; 8
     c38:	d0 f4       	brcc	.+52     	; 0xc6e <GLCD_SetCursor+0x46>
     c3a:	40 34       	cpi	r20, 0x40	; 64
     c3c:	c0 f4       	brcc	.+48     	; 0xc6e <GLCD_SetCursor+0x46>
     c3e:	14 2f       	mov	r17, r20
     c40:	06 2f       	mov	r16, r22
     c42:	f8 2e       	mov	r15, r24
     c44:	81 11       	cpse	r24, r1
     c46:	03 c0       	rjmp	.+6      	; 0xc4e <GLCD_SetCursor+0x26>
     c48:	0e 94 cf 05 	call	0xb9e	; 0xb9e <glcd_SelectPage0>
     c4c:	02 c0       	rjmp	.+4      	; 0xc52 <GLCD_SetCursor+0x2a>
     c4e:	0e 94 d6 05 	call	0xbac	; 0xbac <glcd_SelectPage1>
     c52:	c8 e4       	ldi	r28, 0x48	; 72
     c54:	d1 e0       	ldi	r29, 0x01	; 1
     c56:	f8 82       	st	Y, r15
     c58:	60 2f       	mov	r22, r16
     c5a:	68 6b       	ori	r22, 0xB8	; 184
     c5c:	69 83       	std	Y+1, r22	; 0x01
     c5e:	81 2f       	mov	r24, r17
     c60:	80 64       	ori	r24, 0x40	; 64
     c62:	8a 83       	std	Y+2, r24	; 0x02
     c64:	0e 94 dd 05 	call	0xbba	; 0xbba <glcd_CmdWrite>
     c68:	89 81       	ldd	r24, Y+1	; 0x01
     c6a:	0e 94 dd 05 	call	0xbba	; 0xbba <glcd_CmdWrite>
     c6e:	df 91       	pop	r29
     c70:	cf 91       	pop	r28
     c72:	1f 91       	pop	r17
     c74:	0f 91       	pop	r16
     c76:	ff 90       	pop	r15
     c78:	08 95       	ret

00000c7a <GLCD_GoToPage>:
     c7a:	1f 93       	push	r17
     c7c:	cf 93       	push	r28
     c7e:	df 93       	push	r29
     c80:	82 30       	cpi	r24, 0x02	; 2
     c82:	98 f4       	brcc	.+38     	; 0xcaa <GLCD_GoToPage+0x30>
     c84:	18 2f       	mov	r17, r24
     c86:	81 11       	cpse	r24, r1
     c88:	03 c0       	rjmp	.+6      	; 0xc90 <GLCD_GoToPage+0x16>
     c8a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <glcd_SelectPage0>
     c8e:	02 c0       	rjmp	.+4      	; 0xc94 <GLCD_GoToPage+0x1a>
     c90:	0e 94 d6 05 	call	0xbac	; 0xbac <glcd_SelectPage1>
     c94:	c8 e4       	ldi	r28, 0x48	; 72
     c96:	d1 e0       	ldi	r29, 0x01	; 1
     c98:	18 83       	st	Y, r17
     c9a:	80 e4       	ldi	r24, 0x40	; 64
     c9c:	8a 83       	std	Y+2, r24	; 0x02
     c9e:	89 81       	ldd	r24, Y+1	; 0x01
     ca0:	0e 94 dd 05 	call	0xbba	; 0xbba <glcd_CmdWrite>
     ca4:	8a 81       	ldd	r24, Y+2	; 0x02
     ca6:	0e 94 dd 05 	call	0xbba	; 0xbba <glcd_CmdWrite>
     caa:	df 91       	pop	r29
     cac:	cf 91       	pop	r28
     cae:	1f 91       	pop	r17
     cb0:	08 95       	ret

00000cb2 <GLCD_GoToLine>:
     cb2:	88 30       	cpi	r24, 0x08	; 8
     cb4:	30 f4       	brcc	.+12     	; 0xcc2 <GLCD_GoToLine+0x10>
     cb6:	88 54       	subi	r24, 0x48	; 72
     cb8:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <GLCD+0x1>
     cbc:	80 e0       	ldi	r24, 0x00	; 0
     cbe:	0e 94 3d 06 	call	0xc7a	; 0xc7a <GLCD_GoToPage>
     cc2:	08 95       	ret

00000cc4 <GLCD_Clear>:
     cc4:	1f 93       	push	r17
     cc6:	cf 93       	push	r28
     cc8:	df 93       	push	r29
     cca:	e8 e4       	ldi	r30, 0x48	; 72
     ccc:	f1 e0       	ldi	r31, 0x01	; 1
     cce:	13 81       	ldd	r17, Z+3	; 0x03
     cd0:	13 82       	std	Z+3, r1	; 0x03
     cd2:	d0 e0       	ldi	r29, 0x00	; 0
     cd4:	11 c0       	rjmp	.+34     	; 0xcf8 <GLCD_Clear+0x34>
     cd6:	8d 2f       	mov	r24, r29
     cd8:	0e 94 59 06 	call	0xcb2	; 0xcb2 <GLCD_GoToLine>
     cdc:	c0 e0       	ldi	r28, 0x00	; 0
     cde:	09 c0       	rjmp	.+18     	; 0xcf2 <GLCD_Clear+0x2e>
     ce0:	c0 34       	cpi	r28, 0x40	; 64
     ce2:	19 f4       	brne	.+6      	; 0xcea <GLCD_Clear+0x26>
     ce4:	81 e0       	ldi	r24, 0x01	; 1
     ce6:	0e 94 3d 06 	call	0xc7a	; 0xc7a <GLCD_GoToPage>
     cea:	80 e0       	ldi	r24, 0x00	; 0
     cec:	0e 94 f7 05 	call	0xbee	; 0xbee <glcd_DataWrite>
     cf0:	cf 5f       	subi	r28, 0xFF	; 255
     cf2:	cc 23       	and	r28, r28
     cf4:	ac f7       	brge	.-22     	; 0xce0 <GLCD_Clear+0x1c>
     cf6:	df 5f       	subi	r29, 0xFF	; 255
     cf8:	d8 30       	cpi	r29, 0x08	; 8
     cfa:	68 f3       	brcs	.-38     	; 0xcd6 <GLCD_Clear+0x12>
     cfc:	10 93 4b 01 	sts	0x014B, r17	; 0x80014b <GLCD+0x3>
     d00:	80 e0       	ldi	r24, 0x00	; 0
     d02:	0e 94 59 06 	call	0xcb2	; 0xcb2 <GLCD_GoToLine>
     d06:	df 91       	pop	r29
     d08:	cf 91       	pop	r28
     d0a:	1f 91       	pop	r17
     d0c:	08 95       	ret

00000d0e <GLCD_Init>:
     d0e:	8f ef       	ldi	r24, 0xFF	; 255
     d10:	84 bb       	out	0x14, r24	; 20
     d12:	8a bb       	out	0x1a, r24	; 26
     d14:	85 b3       	in	r24, 0x15	; 21
     d16:	88 60       	ori	r24, 0x08	; 8
     d18:	85 bb       	out	0x15, r24	; 21
     d1a:	87 ec       	ldi	r24, 0xC7	; 199
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	01 97       	sbiw	r24, 0x01	; 1
     d20:	f1 f7       	brne	.-4      	; 0xd1e <GLCD_Init+0x10>
     d22:	00 c0       	rjmp	.+0      	; 0xd24 <GLCD_Init+0x16>
     d24:	00 00       	nop
     d26:	85 b3       	in	r24, 0x15	; 21
     d28:	87 7f       	andi	r24, 0xF7	; 247
     d2a:	85 bb       	out	0x15, r24	; 21
     d2c:	95 e3       	ldi	r25, 0x35	; 53
     d2e:	9a 95       	dec	r25
     d30:	f1 f7       	brne	.-4      	; 0xd2e <GLCD_Init+0x20>
     d32:	00 00       	nop
     d34:	85 b3       	in	r24, 0x15	; 21
     d36:	88 60       	ori	r24, 0x08	; 8
     d38:	85 bb       	out	0x15, r24	; 21
     d3a:	87 ec       	ldi	r24, 0xC7	; 199
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	01 97       	sbiw	r24, 0x01	; 1
     d40:	f1 f7       	brne	.-4      	; 0xd3e <GLCD_Init+0x30>
     d42:	00 c0       	rjmp	.+0      	; 0xd44 <GLCD_Init+0x36>
     d44:	00 00       	nop
     d46:	0e 94 cf 05 	call	0xb9e	; 0xb9e <glcd_SelectPage0>
     d4a:	8f e3       	ldi	r24, 0x3F	; 63
     d4c:	0e 94 dd 05 	call	0xbba	; 0xbba <glcd_CmdWrite>
     d50:	0e 94 d6 05 	call	0xbac	; 0xbac <glcd_SelectPage1>
     d54:	8f e3       	ldi	r24, 0x3F	; 63
     d56:	0e 94 dd 05 	call	0xbba	; 0xbba <glcd_CmdWrite>
     d5a:	8f e1       	ldi	r24, 0x1F	; 31
     d5c:	9e e4       	ldi	r25, 0x4E	; 78
     d5e:	01 97       	sbiw	r24, 0x01	; 1
     d60:	f1 f7       	brne	.-4      	; 0xd5e <GLCD_Init+0x50>
     d62:	00 c0       	rjmp	.+0      	; 0xd64 <GLCD_Init+0x56>
     d64:	00 00       	nop
     d66:	0e 94 cf 05 	call	0xb9e	; 0xb9e <glcd_SelectPage0>
     d6a:	80 ec       	ldi	r24, 0xC0	; 192
     d6c:	0e 94 dd 05 	call	0xbba	; 0xbba <glcd_CmdWrite>
     d70:	0e 94 d6 05 	call	0xbac	; 0xbac <glcd_SelectPage1>
     d74:	80 ec       	ldi	r24, 0xC0	; 192
     d76:	0e 94 dd 05 	call	0xbba	; 0xbba <glcd_CmdWrite>
     d7a:	0e 94 62 06 	call	0xcc4	; 0xcc4 <GLCD_Clear>
     d7e:	08 95       	ret

00000d80 <GLCD_GoToNextLine>:
     d80:	e8 e4       	ldi	r30, 0x48	; 72
     d82:	f1 e0       	ldi	r31, 0x01	; 1
     d84:	81 81       	ldd	r24, Z+1	; 0x01
     d86:	8f 5f       	subi	r24, 0xFF	; 255
     d88:	81 83       	std	Z+1, r24	; 0x01
     d8a:	80 3c       	cpi	r24, 0xC0	; 192
     d8c:	18 f0       	brcs	.+6      	; 0xd94 <GLCD_GoToNextLine+0x14>
     d8e:	88 eb       	ldi	r24, 0xB8	; 184
     d90:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <GLCD+0x1>
     d94:	80 e0       	ldi	r24, 0x00	; 0
     d96:	0e 94 3d 06 	call	0xc7a	; 0xc7a <GLCD_GoToPage>
     d9a:	08 95       	ret

00000d9c <GLCD_DisplayChar>:
}
void GLCD_DisplayChar(Uint8 var_lcdData_u8)
{
     d9c:	0f 93       	push	r16
     d9e:	1f 93       	push	r17
     da0:	cf 93       	push	r28
     da2:	df 93       	push	r29
     da4:	c8 2f       	mov	r28, r24
    Uint8 dat,*ptr;


    if(((GLCD.PageNum == 0x01) && (GLCD.CursorPos>=0x7c)) || (var_lcdData_u8=='\n'))
     da6:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <GLCD>
     daa:	81 30       	cpi	r24, 0x01	; 1
     dac:	21 f4       	brne	.+8      	; 0xdb6 <GLCD_DisplayChar+0x1a>
     dae:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <GLCD+0x2>
     db2:	8c 37       	cpi	r24, 0x7C	; 124
     db4:	10 f4       	brcc	.+4      	; 0xdba <GLCD_DisplayChar+0x1e>
     db6:	ca 30       	cpi	r28, 0x0A	; 10
     db8:	11 f4       	brne	.+4      	; 0xdbe <GLCD_DisplayChar+0x22>
    {
        /* If the cursor has reached to end of line on page1
        OR NewLine command is issued Then Move the cursor to next line */
        GLCD_GoToNextLine();
     dba:	0e 94 c0 06 	call	0xd80	; 0xd80 <GLCD_GoToNextLine>
    }
       if(var_lcdData_u8!='\n') 
     dbe:	ca 30       	cpi	r28, 0x0A	; 10
     dc0:	41 f1       	breq	.+80     	; 0xe12 <GLCD_DisplayChar+0x76>
    {
        ptr= &ARR_GlcdFont_U8[var_lcdData_u8][0]; /* Get the address of the Character pattern */
     dc2:	8c 2f       	mov	r24, r28
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	ec 01       	movw	r28, r24
     dc8:	cc 0f       	add	r28, r28
     dca:	dd 1f       	adc	r29, r29
     dcc:	cc 0f       	add	r28, r28
     dce:	dd 1f       	adc	r29, r29
     dd0:	cc 0f       	add	r28, r28
     dd2:	dd 1f       	adc	r29, r29
     dd4:	c8 1b       	sub	r28, r24
     dd6:	d9 0b       	sbc	r29, r25
     dd8:	cc 5a       	subi	r28, 0xAC	; 172
     dda:	df 4f       	sbci	r29, 0xFF	; 255
        while(1)
        {
            if((GLCD.PageNum == 0x00) && (GLCD.CursorPos==0x80))
     ddc:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <GLCD>
     de0:	81 11       	cpse	r24, r1
     de2:	07 c0       	rjmp	.+14     	; 0xdf2 <GLCD_DisplayChar+0x56>
     de4:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <GLCD+0x2>
     de8:	80 38       	cpi	r24, 0x80	; 128
     dea:	19 f4       	brne	.+6      	; 0xdf2 <GLCD_DisplayChar+0x56>
            {
                /* If the cursor has reached to end of line on page0
                     Then Move the cursor to Page1 */
                GLCD_GoToPage(1);
     dec:	81 e0       	ldi	r24, 0x01	; 1
     dee:	0e 94 3d 06 	call	0xc7a	; 0xc7a <GLCD_GoToPage>
            }

            dat= pgm_read_byte(ptr++);/* Get the data to be displayed for LookUptable*/
     df2:	8e 01       	movw	r16, r28
     df4:	0f 5f       	subi	r16, 0xFF	; 255
     df6:	1f 4f       	sbci	r17, 0xFF	; 255
     df8:	fe 01       	movw	r30, r28
     dfa:	84 91       	lpm	r24, Z

            if(dat==0xff) /* Exit the loop if End of char is encountered */
     dfc:	8f 3f       	cpi	r24, 0xFF	; 255
     dfe:	49 f0       	breq	.+18     	; 0xe12 <GLCD_DisplayChar+0x76>
                break;

            glcd_DataWrite(dat); /* Display the data and keep track of cursor */
     e00:	0e 94 f7 05 	call	0xbee	; 0xbee <glcd_DataWrite>
            GLCD.CursorPos++;
     e04:	e8 e4       	ldi	r30, 0x48	; 72
     e06:	f1 e0       	ldi	r31, 0x01	; 1
     e08:	82 81       	ldd	r24, Z+2	; 0x02
     e0a:	8f 5f       	subi	r24, 0xFF	; 255
     e0c:	82 83       	std	Z+2, r24	; 0x02
                /* If the cursor has reached to end of line on page0
                     Then Move the cursor to Page1 */
                GLCD_GoToPage(1);
            }

            dat= pgm_read_byte(ptr++);/* Get the data to be displayed for LookUptable*/
     e0e:	e8 01       	movw	r28, r16
            if(dat==0xff) /* Exit the loop if End of char is encountered */
                break;

            glcd_DataWrite(dat); /* Display the data and keep track of cursor */
            GLCD.CursorPos++;
        }
     e10:	e5 cf       	rjmp	.-54     	; 0xddc <GLCD_DisplayChar+0x40>
    }
}
     e12:	df 91       	pop	r29
     e14:	cf 91       	pop	r28
     e16:	1f 91       	pop	r17
     e18:	0f 91       	pop	r16
     e1a:	08 95       	ret

00000e1c <GLCD_DisplayString>:
void GLCD_DisplayString(int8 *ptr_stringPointer_u8)
{
     e1c:	cf 93       	push	r28
     e1e:	df 93       	push	r29
     e20:	ec 01       	movw	r28, r24
	while((*ptr_stringPointer_u8)!=0)
     e22:	03 c0       	rjmp	.+6      	; 0xe2a <GLCD_DisplayString+0xe>
	GLCD_DisplayChar(*ptr_stringPointer_u8++); // Loop through the string and display char by char
     e24:	21 96       	adiw	r28, 0x01	; 1
     e26:	0e 94 ce 06 	call	0xd9c	; 0xd9c <GLCD_DisplayChar>
        }
    }
}
void GLCD_DisplayString(int8 *ptr_stringPointer_u8)
{
	while((*ptr_stringPointer_u8)!=0)
     e2a:	88 81       	ld	r24, Y
     e2c:	81 11       	cpse	r24, r1
     e2e:	fa cf       	rjmp	.-12     	; 0xe24 <GLCD_DisplayString+0x8>
	GLCD_DisplayChar(*ptr_stringPointer_u8++); // Loop through the string and display char by char
}
     e30:	df 91       	pop	r29
     e32:	cf 91       	pop	r28
     e34:	08 95       	ret

00000e36 <GLCD_DisplayDecimalNumber>:

#if ((Enable_GLCD_DisplayDecimalNumber == 1) || (Enable_GLCD_DisplayFloatNumber == 1))
void GLCD_DisplayDecimalNumber(Uint16 var_DecNumber_u32, Uint8 var_numOfDigitsToDisplay_u8)
{
     e36:	1f 93       	push	r17
     e38:	cf 93       	push	r28
     e3a:	df 93       	push	r29
     e3c:	cd b7       	in	r28, 0x3d	; 61
     e3e:	de b7       	in	r29, 0x3e	; 62
     e40:	2a 97       	sbiw	r28, 0x0a	; 10
     e42:	0f b6       	in	r0, 0x3f	; 63
     e44:	f8 94       	cli
     e46:	de bf       	out	0x3e, r29	; 62
     e48:	0f be       	out	0x3f, r0	; 63
     e4a:	cd bf       	out	0x3d, r28	; 61
     e4c:	ac 01       	movw	r20, r24
     e4e:	e6 2f       	mov	r30, r22
    Uint8 i=0,a[10];

    if(var_DecNumber_u32==0)
     e50:	89 2b       	or	r24, r25
     e52:	59 f0       	breq	.+22     	; 0xe6a <GLCD_DisplayDecimalNumber+0x34>
     e54:	10 e0       	ldi	r17, 0x00	; 0
     e56:	4a c0       	rjmp	.+148    	; 0xeec <GLCD_DisplayDecimalNumber+0xb6>
    {
        /* If the number is zero then update the array with the same for displaying */
        for(i=0;((i<var_numOfDigitsToDisplay_u8) && (i<C_GlcdMaxDigitsToDisplay_U8));i++)
            a[i] = 0x00;
     e58:	a1 e0       	ldi	r26, 0x01	; 1
     e5a:	b0 e0       	ldi	r27, 0x00	; 0
     e5c:	ac 0f       	add	r26, r28
     e5e:	bd 1f       	adc	r27, r29
     e60:	a1 0f       	add	r26, r17
     e62:	b1 1d       	adc	r27, r1
     e64:	1c 92       	st	X, r1
    Uint8 i=0,a[10];

    if(var_DecNumber_u32==0)
    {
        /* If the number is zero then update the array with the same for displaying */
        for(i=0;((i<var_numOfDigitsToDisplay_u8) && (i<C_GlcdMaxDigitsToDisplay_U8));i++)
     e66:	1f 5f       	subi	r17, 0xFF	; 255
     e68:	01 c0       	rjmp	.+2      	; 0xe6c <GLCD_DisplayDecimalNumber+0x36>
     e6a:	10 e0       	ldi	r17, 0x00	; 0
     e6c:	1e 17       	cp	r17, r30
     e6e:	08 f0       	brcs	.+2      	; 0xe72 <GLCD_DisplayDecimalNumber+0x3c>
     e70:	4e c0       	rjmp	.+156    	; 0xf0e <GLCD_DisplayDecimalNumber+0xd8>
     e72:	1a 30       	cpi	r17, 0x0A	; 10
     e74:	88 f3       	brcs	.-30     	; 0xe58 <GLCD_DisplayDecimalNumber+0x22>
     e76:	4b c0       	rjmp	.+150    	; 0xf0e <GLCD_DisplayDecimalNumber+0xd8>
    {
        for(i=0;i<var_numOfDigitsToDisplay_u8;i++)
        {
            /* Continue extracting the digits from right side
               till the Specified var_numOfDigitsToDisplay_u8 */
            if(var_DecNumber_u32!=0)
     e78:	41 15       	cp	r20, r1
     e7a:	51 05       	cpc	r21, r1
     e7c:	69 f1       	breq	.+90     	; 0xed8 <GLCD_DisplayDecimalNumber+0xa2>
            {
                /* Extract the digits from the number till it becomes zero.
                First get the remainder and divide the number by 10 each time.
                If var_num_u32 = 123 then extracted remainder will be 3 and number will be 12.
                The process continues till it becomes zero or max digits reached*/
                a[i]=util_GetMod32(var_DecNumber_u32,10);
     e7e:	9a 01       	movw	r18, r20
     e80:	ad ec       	ldi	r26, 0xCD	; 205
     e82:	bc ec       	ldi	r27, 0xCC	; 204
     e84:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <__umulhisi3>
     e88:	96 95       	lsr	r25
     e8a:	87 95       	ror	r24
     e8c:	96 95       	lsr	r25
     e8e:	87 95       	ror	r24
     e90:	96 95       	lsr	r25
     e92:	87 95       	ror	r24
     e94:	9c 01       	movw	r18, r24
     e96:	22 0f       	add	r18, r18
     e98:	33 1f       	adc	r19, r19
     e9a:	88 0f       	add	r24, r24
     e9c:	99 1f       	adc	r25, r25
     e9e:	88 0f       	add	r24, r24
     ea0:	99 1f       	adc	r25, r25
     ea2:	88 0f       	add	r24, r24
     ea4:	99 1f       	adc	r25, r25
     ea6:	82 0f       	add	r24, r18
     ea8:	93 1f       	adc	r25, r19
     eaa:	9a 01       	movw	r18, r20
     eac:	28 1b       	sub	r18, r24
     eae:	39 0b       	sbc	r19, r25
     eb0:	a1 e0       	ldi	r26, 0x01	; 1
     eb2:	b0 e0       	ldi	r27, 0x00	; 0
     eb4:	ac 0f       	add	r26, r28
     eb6:	bd 1f       	adc	r27, r29
     eb8:	a1 0f       	add	r26, r17
     eba:	b1 1d       	adc	r27, r1
     ebc:	2c 93       	st	X, r18
                var_DecNumber_u32=var_DecNumber_u32/10;
     ebe:	9a 01       	movw	r18, r20
     ec0:	ad ec       	ldi	r26, 0xCD	; 205
     ec2:	bc ec       	ldi	r27, 0xCC	; 204
     ec4:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <__umulhisi3>
     ec8:	ac 01       	movw	r20, r24
     eca:	56 95       	lsr	r21
     ecc:	47 95       	ror	r20
     ece:	56 95       	lsr	r21
     ed0:	47 95       	ror	r20
     ed2:	56 95       	lsr	r21
     ed4:	47 95       	ror	r20
     ed6:	09 c0       	rjmp	.+18     	; 0xeea <GLCD_DisplayDecimalNumber+0xb4>
            }
            else if( (var_numOfDigitsToDisplay_u8 == C_GlcdDisplayDefaultDigits_U8) ||
     ed8:	eb 30       	cpi	r30, 0x0B	; 11
     eda:	c8 f4       	brcc	.+50     	; 0xf0e <GLCD_DisplayDecimalNumber+0xd8>
            else
            {
                /* In case user expects more digits to be displayed than the actual digits in number,
                  then update the remaining digits with zero.
               Ex: var_num_u32 is 123 and user wants five digits then 00123 has to be displayed */
                a[i]=0;
     edc:	a1 e0       	ldi	r26, 0x01	; 1
     ede:	b0 e0       	ldi	r27, 0x00	; 0
     ee0:	ac 0f       	add	r26, r28
     ee2:	bd 1f       	adc	r27, r29
     ee4:	a1 0f       	add	r26, r17
     ee6:	b1 1d       	adc	r27, r1
     ee8:	1c 92       	st	X, r1
        for(i=0;((i<var_numOfDigitsToDisplay_u8) && (i<C_GlcdMaxDigitsToDisplay_U8));i++)
            a[i] = 0x00;
    }
    else
    {
        for(i=0;i<var_numOfDigitsToDisplay_u8;i++)
     eea:	1f 5f       	subi	r17, 0xFF	; 255
     eec:	1e 17       	cp	r17, r30
     eee:	20 f2       	brcs	.-120    	; 0xe78 <GLCD_DisplayDecimalNumber+0x42>
     ef0:	0e c0       	rjmp	.+28     	; 0xf0e <GLCD_DisplayDecimalNumber+0xd8>


    while(i)
    { 
        /* Finally get the ascii values of the digits and display*/
        GLCD_DisplayChar(util_Dec2Ascii(a[i-1]));
     ef2:	e1 2f       	mov	r30, r17
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	31 97       	sbiw	r30, 0x01	; 1
     ef8:	81 e0       	ldi	r24, 0x01	; 1
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	8c 0f       	add	r24, r28
     efe:	9d 1f       	adc	r25, r29
     f00:	e8 0f       	add	r30, r24
     f02:	f9 1f       	adc	r31, r25
     f04:	80 81       	ld	r24, Z
     f06:	80 5d       	subi	r24, 0xD0	; 208
     f08:	0e 94 ce 06 	call	0xd9c	; 0xd9c <GLCD_DisplayChar>
        i--;
     f0c:	11 50       	subi	r17, 0x01	; 1
            }
        }
    }


    while(i)
     f0e:	11 11       	cpse	r17, r1
     f10:	f0 cf       	rjmp	.-32     	; 0xef2 <GLCD_DisplayDecimalNumber+0xbc>
    { 
        /* Finally get the ascii values of the digits and display*/
        GLCD_DisplayChar(util_Dec2Ascii(a[i-1]));
        i--;
    }
}
     f12:	2a 96       	adiw	r28, 0x0a	; 10
     f14:	0f b6       	in	r0, 0x3f	; 63
     f16:	f8 94       	cli
     f18:	de bf       	out	0x3e, r29	; 62
     f1a:	0f be       	out	0x3f, r0	; 63
     f1c:	cd bf       	out	0x3d, r28	; 61
     f1e:	df 91       	pop	r29
     f20:	cf 91       	pop	r28
     f22:	1f 91       	pop	r17
     f24:	08 95       	ret

00000f26 <DIO_ReadChannel>:
		}
		break;
	}
}
STD_LevelTypes DIO_ReadChannel(DIO_ChannelType ChannelId){
	DIO_PortType PORTx = ChannelId/8;
     f26:	98 2f       	mov	r25, r24
     f28:	96 95       	lsr	r25
     f2a:	96 95       	lsr	r25
     f2c:	96 95       	lsr	r25
	DIO_ChannelType BitNo = ChannelId%8;
     f2e:	48 2f       	mov	r20, r24
     f30:	47 70       	andi	r20, 0x07	; 7
	STD_LevelTypes BitValue = Low;
	switch(PORTx){
     f32:	91 30       	cpi	r25, 0x01	; 1
     f34:	81 f0       	breq	.+32     	; 0xf56 <DIO_ReadChannel+0x30>
     f36:	28 f0       	brcs	.+10     	; 0xf42 <DIO_ReadChannel+0x1c>
     f38:	92 30       	cpi	r25, 0x02	; 2
     f3a:	b9 f0       	breq	.+46     	; 0xf6a <DIO_ReadChannel+0x44>
     f3c:	93 30       	cpi	r25, 0x03	; 3
     f3e:	f9 f0       	breq	.+62     	; 0xf7e <DIO_ReadChannel+0x58>
     f40:	28 c0       	rjmp	.+80     	; 0xf92 <DIO_ReadChannel+0x6c>
		case DIO_PORTA :
			BitValue =GetBit(PINA_Reg,BitNo);
     f42:	99 b3       	in	r25, 0x19	; 25
     f44:	89 2f       	mov	r24, r25
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	02 c0       	rjmp	.+4      	; 0xf4e <DIO_ReadChannel+0x28>
     f4a:	95 95       	asr	r25
     f4c:	87 95       	ror	r24
     f4e:	4a 95       	dec	r20
     f50:	e2 f7       	brpl	.-8      	; 0xf4a <DIO_ReadChannel+0x24>
     f52:	81 70       	andi	r24, 0x01	; 1
		break;
     f54:	08 95       	ret
		
		case DIO_PORTB :
		BitValue =GetBit(PINB_Reg,BitNo);
     f56:	26 b3       	in	r18, 0x16	; 22
     f58:	30 e0       	ldi	r19, 0x00	; 0
     f5a:	c9 01       	movw	r24, r18
     f5c:	02 c0       	rjmp	.+4      	; 0xf62 <DIO_ReadChannel+0x3c>
     f5e:	95 95       	asr	r25
     f60:	87 95       	ror	r24
     f62:	4a 95       	dec	r20
     f64:	e2 f7       	brpl	.-8      	; 0xf5e <DIO_ReadChannel+0x38>
     f66:	81 70       	andi	r24, 0x01	; 1
		break;
     f68:	08 95       	ret
		
		case DIO_PORTC :
		BitValue =GetBit(PINC_Reg,BitNo);
     f6a:	23 b3       	in	r18, 0x13	; 19
     f6c:	30 e0       	ldi	r19, 0x00	; 0
     f6e:	c9 01       	movw	r24, r18
     f70:	02 c0       	rjmp	.+4      	; 0xf76 <DIO_ReadChannel+0x50>
     f72:	95 95       	asr	r25
     f74:	87 95       	ror	r24
     f76:	4a 95       	dec	r20
     f78:	e2 f7       	brpl	.-8      	; 0xf72 <DIO_ReadChannel+0x4c>
     f7a:	81 70       	andi	r24, 0x01	; 1
		break;
     f7c:	08 95       	ret
		
		case DIO_PORTD :
		BitValue =GetBit(PIND_Reg,BitNo);
     f7e:	20 b3       	in	r18, 0x10	; 16
     f80:	30 e0       	ldi	r19, 0x00	; 0
     f82:	c9 01       	movw	r24, r18
     f84:	02 c0       	rjmp	.+4      	; 0xf8a <DIO_ReadChannel+0x64>
     f86:	95 95       	asr	r25
     f88:	87 95       	ror	r24
     f8a:	4a 95       	dec	r20
     f8c:	e2 f7       	brpl	.-8      	; 0xf86 <DIO_ReadChannel+0x60>
     f8e:	81 70       	andi	r24, 0x01	; 1
		break;
     f90:	08 95       	ret
	}
}
STD_LevelTypes DIO_ReadChannel(DIO_ChannelType ChannelId){
	DIO_PortType PORTx = ChannelId/8;
	DIO_ChannelType BitNo = ChannelId%8;
	STD_LevelTypes BitValue = Low;
     f92:	80 e0       	ldi	r24, 0x00	; 0
		case DIO_PORTD :
		BitValue =GetBit(PIND_Reg,BitNo);
		break;
	}
	return BitValue;
}
     f94:	08 95       	ret

00000f96 <DIO_Init>:
	
void DIO_Init(void){
	DIO_ChannelType count=DIO_ChannelA0;
	DIO_PortType Portx;
	DIO_ChannelType BitNo ;
	for (count = DIO_ChannelA0 ; count < PinCount; count ++ ){
     f96:	80 e0       	ldi	r24, 0x00	; 0
     f98:	a0 c0       	rjmp	.+320    	; 0x10da <DIO_Init+0x144>
		Portx = count/8;
     f9a:	98 2f       	mov	r25, r24
     f9c:	96 95       	lsr	r25
     f9e:	96 95       	lsr	r25
     fa0:	96 95       	lsr	r25
		BitNo = count%8;
     fa2:	28 2f       	mov	r18, r24
     fa4:	27 70       	andi	r18, 0x07	; 7
		switch (Portx){
     fa6:	91 30       	cpi	r25, 0x01	; 1
     fa8:	61 f1       	breq	.+88     	; 0x1002 <DIO_Init+0x6c>
     faa:	38 f0       	brcs	.+14     	; 0xfba <DIO_Init+0x24>
     fac:	92 30       	cpi	r25, 0x02	; 2
     fae:	09 f4       	brne	.+2      	; 0xfb2 <DIO_Init+0x1c>
     fb0:	4c c0       	rjmp	.+152    	; 0x104a <DIO_Init+0xb4>
     fb2:	93 30       	cpi	r25, 0x03	; 3
     fb4:	09 f4       	brne	.+2      	; 0xfb8 <DIO_Init+0x22>
     fb6:	6d c0       	rjmp	.+218    	; 0x1092 <DIO_Init+0xfc>
     fb8:	8f c0       	rjmp	.+286    	; 0x10d8 <DIO_Init+0x142>
			
			case DIO_PORTA:
			
			if(PinCfg[count].PinDir == Output){
     fba:	e8 2f       	mov	r30, r24
     fbc:	f0 e0       	ldi	r31, 0x00	; 0
     fbe:	ee 0f       	add	r30, r30
     fc0:	ff 1f       	adc	r31, r31
     fc2:	e0 5a       	subi	r30, 0xA0	; 160
     fc4:	ff 4f       	sbci	r31, 0xFF	; 255
     fc6:	90 81       	ld	r25, Z
     fc8:	91 30       	cpi	r25, 0x01	; 1
     fca:	69 f4       	brne	.+26     	; 0xfe6 <DIO_Init+0x50>
				
				SetBit(DDRA_Reg,BitNo);
     fcc:	9a b3       	in	r25, 0x1a	; 26
     fce:	41 e0       	ldi	r20, 0x01	; 1
     fd0:	50 e0       	ldi	r21, 0x00	; 0
     fd2:	ba 01       	movw	r22, r20
     fd4:	02 c0       	rjmp	.+4      	; 0xfda <DIO_Init+0x44>
     fd6:	66 0f       	add	r22, r22
     fd8:	77 1f       	adc	r23, r23
     fda:	2a 95       	dec	r18
     fdc:	e2 f7       	brpl	.-8      	; 0xfd6 <DIO_Init+0x40>
     fde:	9b 01       	movw	r18, r22
     fe0:	29 2b       	or	r18, r25
     fe2:	2a bb       	out	0x1a, r18	; 26
     fe4:	79 c0       	rjmp	.+242    	; 0x10d8 <DIO_Init+0x142>
			
			}
			else {
				
				ClearBit(DDRA_Reg,BitNo);
     fe6:	9a b3       	in	r25, 0x1a	; 26
     fe8:	41 e0       	ldi	r20, 0x01	; 1
     fea:	50 e0       	ldi	r21, 0x00	; 0
     fec:	ba 01       	movw	r22, r20
     fee:	02 c0       	rjmp	.+4      	; 0xff4 <DIO_Init+0x5e>
     ff0:	66 0f       	add	r22, r22
     ff2:	77 1f       	adc	r23, r23
     ff4:	2a 95       	dec	r18
     ff6:	e2 f7       	brpl	.-8      	; 0xff0 <DIO_Init+0x5a>
     ff8:	9b 01       	movw	r18, r22
     ffa:	20 95       	com	r18
     ffc:	29 23       	and	r18, r25
     ffe:	2a bb       	out	0x1a, r18	; 26
    1000:	6b c0       	rjmp	.+214    	; 0x10d8 <DIO_Init+0x142>
			}
			break;
			
			case DIO_PORTB:
			
			if(PinCfg[count].PinDir == Output){
    1002:	e8 2f       	mov	r30, r24
    1004:	f0 e0       	ldi	r31, 0x00	; 0
    1006:	ee 0f       	add	r30, r30
    1008:	ff 1f       	adc	r31, r31
    100a:	e0 5a       	subi	r30, 0xA0	; 160
    100c:	ff 4f       	sbci	r31, 0xFF	; 255
    100e:	90 81       	ld	r25, Z
    1010:	91 30       	cpi	r25, 0x01	; 1
    1012:	69 f4       	brne	.+26     	; 0x102e <DIO_Init+0x98>
				
				SetBit(DDRB_Reg,BitNo);
    1014:	97 b3       	in	r25, 0x17	; 23
    1016:	41 e0       	ldi	r20, 0x01	; 1
    1018:	50 e0       	ldi	r21, 0x00	; 0
    101a:	ba 01       	movw	r22, r20
    101c:	02 c0       	rjmp	.+4      	; 0x1022 <DIO_Init+0x8c>
    101e:	66 0f       	add	r22, r22
    1020:	77 1f       	adc	r23, r23
    1022:	2a 95       	dec	r18
    1024:	e2 f7       	brpl	.-8      	; 0x101e <DIO_Init+0x88>
    1026:	9b 01       	movw	r18, r22
    1028:	29 2b       	or	r18, r25
    102a:	27 bb       	out	0x17, r18	; 23
    102c:	55 c0       	rjmp	.+170    	; 0x10d8 <DIO_Init+0x142>
				
				}else {
				
				ClearBit(DDRB_Reg,BitNo);
    102e:	97 b3       	in	r25, 0x17	; 23
    1030:	41 e0       	ldi	r20, 0x01	; 1
    1032:	50 e0       	ldi	r21, 0x00	; 0
    1034:	ba 01       	movw	r22, r20
    1036:	02 c0       	rjmp	.+4      	; 0x103c <DIO_Init+0xa6>
    1038:	66 0f       	add	r22, r22
    103a:	77 1f       	adc	r23, r23
    103c:	2a 95       	dec	r18
    103e:	e2 f7       	brpl	.-8      	; 0x1038 <DIO_Init+0xa2>
    1040:	9b 01       	movw	r18, r22
    1042:	20 95       	com	r18
    1044:	29 23       	and	r18, r25
    1046:	27 bb       	out	0x17, r18	; 23
    1048:	47 c0       	rjmp	.+142    	; 0x10d8 <DIO_Init+0x142>
			}
			break;
			
			case DIO_PORTC:
			
			if(PinCfg[count].PinDir == Output){
    104a:	e8 2f       	mov	r30, r24
    104c:	f0 e0       	ldi	r31, 0x00	; 0
    104e:	ee 0f       	add	r30, r30
    1050:	ff 1f       	adc	r31, r31
    1052:	e0 5a       	subi	r30, 0xA0	; 160
    1054:	ff 4f       	sbci	r31, 0xFF	; 255
    1056:	90 81       	ld	r25, Z
    1058:	91 30       	cpi	r25, 0x01	; 1
    105a:	69 f4       	brne	.+26     	; 0x1076 <DIO_Init+0xe0>
				
				SetBit(DDRC_Reg,BitNo);
    105c:	94 b3       	in	r25, 0x14	; 20
    105e:	41 e0       	ldi	r20, 0x01	; 1
    1060:	50 e0       	ldi	r21, 0x00	; 0
    1062:	ba 01       	movw	r22, r20
    1064:	02 c0       	rjmp	.+4      	; 0x106a <DIO_Init+0xd4>
    1066:	66 0f       	add	r22, r22
    1068:	77 1f       	adc	r23, r23
    106a:	2a 95       	dec	r18
    106c:	e2 f7       	brpl	.-8      	; 0x1066 <DIO_Init+0xd0>
    106e:	9b 01       	movw	r18, r22
    1070:	29 2b       	or	r18, r25
    1072:	24 bb       	out	0x14, r18	; 20
    1074:	31 c0       	rjmp	.+98     	; 0x10d8 <DIO_Init+0x142>
				
				}
				else {
					
				ClearBit(DDRC_Reg,BitNo);
    1076:	94 b3       	in	r25, 0x14	; 20
    1078:	41 e0       	ldi	r20, 0x01	; 1
    107a:	50 e0       	ldi	r21, 0x00	; 0
    107c:	ba 01       	movw	r22, r20
    107e:	02 c0       	rjmp	.+4      	; 0x1084 <DIO_Init+0xee>
    1080:	66 0f       	add	r22, r22
    1082:	77 1f       	adc	r23, r23
    1084:	2a 95       	dec	r18
    1086:	e2 f7       	brpl	.-8      	; 0x1080 <DIO_Init+0xea>
    1088:	9b 01       	movw	r18, r22
    108a:	20 95       	com	r18
    108c:	29 23       	and	r18, r25
    108e:	24 bb       	out	0x14, r18	; 20
    1090:	23 c0       	rjmp	.+70     	; 0x10d8 <DIO_Init+0x142>
			}
			break;
			
			case DIO_PORTD:
			
			if(PinCfg[count].PinDir == Output){
    1092:	e8 2f       	mov	r30, r24
    1094:	f0 e0       	ldi	r31, 0x00	; 0
    1096:	ee 0f       	add	r30, r30
    1098:	ff 1f       	adc	r31, r31
    109a:	e0 5a       	subi	r30, 0xA0	; 160
    109c:	ff 4f       	sbci	r31, 0xFF	; 255
    109e:	90 81       	ld	r25, Z
    10a0:	91 30       	cpi	r25, 0x01	; 1
    10a2:	69 f4       	brne	.+26     	; 0x10be <DIO_Init+0x128>
				
				SetBit(DDRD_Reg,BitNo);
    10a4:	91 b3       	in	r25, 0x11	; 17
    10a6:	41 e0       	ldi	r20, 0x01	; 1
    10a8:	50 e0       	ldi	r21, 0x00	; 0
    10aa:	ba 01       	movw	r22, r20
    10ac:	02 c0       	rjmp	.+4      	; 0x10b2 <DIO_Init+0x11c>
    10ae:	66 0f       	add	r22, r22
    10b0:	77 1f       	adc	r23, r23
    10b2:	2a 95       	dec	r18
    10b4:	e2 f7       	brpl	.-8      	; 0x10ae <DIO_Init+0x118>
    10b6:	9b 01       	movw	r18, r22
    10b8:	29 2b       	or	r18, r25
    10ba:	21 bb       	out	0x11, r18	; 17
    10bc:	0d c0       	rjmp	.+26     	; 0x10d8 <DIO_Init+0x142>
				
				}
				else {
				
				ClearBit(DDRD_Reg,BitNo);
    10be:	91 b3       	in	r25, 0x11	; 17
    10c0:	41 e0       	ldi	r20, 0x01	; 1
    10c2:	50 e0       	ldi	r21, 0x00	; 0
    10c4:	ba 01       	movw	r22, r20
    10c6:	02 c0       	rjmp	.+4      	; 0x10cc <DIO_Init+0x136>
    10c8:	66 0f       	add	r22, r22
    10ca:	77 1f       	adc	r23, r23
    10cc:	2a 95       	dec	r18
    10ce:	e2 f7       	brpl	.-8      	; 0x10c8 <DIO_Init+0x132>
    10d0:	9b 01       	movw	r18, r22
    10d2:	20 95       	com	r18
    10d4:	29 23       	and	r18, r25
    10d6:	21 bb       	out	0x11, r18	; 17
	
void DIO_Init(void){
	DIO_ChannelType count=DIO_ChannelA0;
	DIO_PortType Portx;
	DIO_ChannelType BitNo ;
	for (count = DIO_ChannelA0 ; count < PinCount; count ++ ){
    10d8:	8f 5f       	subi	r24, 0xFF	; 255
    10da:	80 32       	cpi	r24, 0x20	; 32
    10dc:	08 f4       	brcc	.+2      	; 0x10e0 <DIO_Init+0x14a>
    10de:	5d cf       	rjmp	.-326    	; 0xf9a <DIO_Init+0x4>
			
			}
			break;
		}
	}
    10e0:	08 95       	ret

000010e2 <TIMER0_Init>:
	 #if (TIMER_Operating_Mode == TIMER0_Mode_Normal ) 
		Timer0_TCCR0_Reg |=TIMER0_Normal;
	 #elif (TIMER_Operating_Mode == TIMER0_Mode_CTC ) 
		Timer0_TCCR0_Reg |=TIMER0_CTC;
	 #elif (TIMER_Operating_Mode == TIMER0_Mode_FAST_PWM ) 
		Timer0_TCCR0_Reg |=TIMER0_FAST_PWM;
    10e2:	83 b7       	in	r24, 0x33	; 51
    10e4:	88 64       	ori	r24, 0x48	; 72
    10e6:	83 bf       	out	0x33, r24	; 51
    10e8:	08 95       	ret

000010ea <TIMER0_PWM>:

#endif

#if ((TIMER_Operating_Mode == TIMER0_Mode_FAST_PWM ) || (TIMER_Operating_Mode == TIMER0_Mode_PWM_PHASE_CORRECT ))
void TIMER0_PWM(Uint16 Frequency , Uint8 DutyCycle)
{
    10ea:	ac 01       	movw	r20, r24
	Timer0_TCCR0_Reg=0x60; /*01100000*/
    10ec:	80 e6       	ldi	r24, 0x60	; 96
    10ee:	83 bf       	out	0x33, r24	; 51
	Uint16 Result;
	Result =(DutyCycle*TIMER0_MaxValue)/100;
    10f0:	8f ef       	ldi	r24, 0xFF	; 255
    10f2:	68 9f       	mul	r22, r24
    10f4:	90 01       	movw	r18, r0
    10f6:	11 24       	eor	r1, r1
    10f8:	36 95       	lsr	r19
    10fa:	27 95       	ror	r18
    10fc:	36 95       	lsr	r19
    10fe:	27 95       	ror	r18
    1100:	ab e7       	ldi	r26, 0x7B	; 123
    1102:	b4 e1       	ldi	r27, 0x14	; 20
    1104:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <__umulhisi3>
    1108:	96 95       	lsr	r25
    110a:	87 95       	ror	r24
	Timer0_OCR0_Reg = Result;	
    110c:	8c bf       	out	0x3c, r24	; 60
	
	
	if(Frequency <=61){
    110e:	4e 33       	cpi	r20, 0x3E	; 62
    1110:	51 05       	cpc	r21, r1
    1112:	20 f4       	brcc	.+8      	; 0x111c <TIMER0_PWM+0x32>
		Timer0_TCCR0_Reg |=TIMER0_1024_Prescaling;
    1114:	83 b7       	in	r24, 0x33	; 51
    1116:	85 60       	ori	r24, 0x05	; 5
    1118:	83 bf       	out	0x33, r24	; 51
    111a:	08 95       	ret
		}
		else if (Frequency >61 && Frequency <=244)
    111c:	ca 01       	movw	r24, r20
    111e:	ce 97       	sbiw	r24, 0x3e	; 62
    1120:	87 3b       	cpi	r24, 0xB7	; 183
    1122:	91 05       	cpc	r25, r1
    1124:	20 f4       	brcc	.+8      	; 0x112e <TIMER0_PWM+0x44>
		{
		Timer0_TCCR0_Reg |=TIMER0_256_Prescaling;
    1126:	83 b7       	in	r24, 0x33	; 51
    1128:	84 60       	ori	r24, 0x04	; 4
    112a:	83 bf       	out	0x33, r24	; 51
    112c:	08 95       	ret
		}
		else if (Frequency > 244 && Frequency <= 976)
    112e:	ca 01       	movw	r24, r20
    1130:	85 5f       	subi	r24, 0xF5	; 245
    1132:	91 09       	sbc	r25, r1
    1134:	8c 3d       	cpi	r24, 0xDC	; 220
    1136:	92 40       	sbci	r25, 0x02	; 2
    1138:	20 f4       	brcc	.+8      	; 0x1142 <TIMER0_PWM+0x58>
		{
		Timer0_TCCR0_Reg |=TIMER0_64_Prescaling;
    113a:	83 b7       	in	r24, 0x33	; 51
    113c:	83 60       	ori	r24, 0x03	; 3
    113e:	83 bf       	out	0x33, r24	; 51
    1140:	08 95       	ret
		}
		else if (Frequency >976 && Frequency<=7812)
    1142:	ca 01       	movw	r24, r20
    1144:	81 5d       	subi	r24, 0xD1	; 209
    1146:	93 40       	sbci	r25, 0x03	; 3
    1148:	84 3b       	cpi	r24, 0xB4	; 180
    114a:	9a 41       	sbci	r25, 0x1A	; 26
    114c:	20 f4       	brcc	.+8      	; 0x1156 <TIMER0_PWM+0x6c>
		{
		Timer0_TCCR0_Reg |=TIMER0_8_Prescaling;
    114e:	83 b7       	in	r24, 0x33	; 51
    1150:	82 60       	ori	r24, 0x02	; 2
    1152:	83 bf       	out	0x33, r24	; 51
    1154:	08 95       	ret
		}
		else if (Frequency >7812 )
    1156:	45 38       	cpi	r20, 0x85	; 133
    1158:	5e 41       	sbci	r21, 0x1E	; 30
    115a:	18 f0       	brcs	.+6      	; 0x1162 <TIMER0_PWM+0x78>
		{
		Timer0_TCCR0_Reg |=TIMER0_No_Prescaler;
    115c:	83 b7       	in	r24, 0x33	; 51
    115e:	81 60       	ori	r24, 0x01	; 1
    1160:	83 bf       	out	0x33, r24	; 51
    1162:	08 95       	ret

00001164 <Timer1_Init>:
 */ 
#include "TIMER1.h"
#include "GLCD.h"

void Timer1_Init(void){
	Timer1_TCCR1A_Reg=0;
    1164:	1f bc       	out	0x2f, r1	; 47
	Timer1_TCNT1L_Reg=0;
    1166:	1c bc       	out	0x2c, r1	; 44
	Timer1_TCNT1H_Reg=0;
    1168:	1d bc       	out	0x2d, r1	; 45
	SetBit(Timer1_TIMSK_Reg,5);  /*Enabling Input Capture INT*/
    116a:	89 b7       	in	r24, 0x39	; 57
    116c:	80 62       	ori	r24, 0x20	; 32
    116e:	89 bf       	out	0x39, r24	; 57
 	SetBit(Timer1_TIMSK_Reg,2); /*Enabling OVF INT*/
    1170:	89 b7       	in	r24, 0x39	; 57
    1172:	84 60       	ori	r24, 0x04	; 4
    1174:	89 bf       	out	0x39, r24	; 57
    1176:	08 95       	ret

00001178 <Timer1_Input_Capture>:
	
}

void Timer1_Input_Capture(Uint16 *Frequency, Uint16 *DutyCycle){
    1178:	8f 92       	push	r8
    117a:	9f 92       	push	r9
    117c:	af 92       	push	r10
    117e:	bf 92       	push	r11
    1180:	cf 92       	push	r12
    1182:	df 92       	push	r13
    1184:	ef 92       	push	r14
    1186:	ff 92       	push	r15
    1188:	0f 93       	push	r16
    118a:	1f 93       	push	r17
    118c:	cf 93       	push	r28
    118e:	df 93       	push	r29
    1190:	fc 01       	movw	r30, r24
	Uint16 a,b,c,High,Periodic_Time;
	SetBit(Timer1_TIFR_Reg,ICF1);
    1192:	98 b7       	in	r25, 0x38	; 56
    1194:	90 62       	ori	r25, 0x20	; 32
    1196:	98 bf       	out	0x38, r25	; 56
	Timer1_TCCR1B_Reg = 0x41; /* 01000001 */ /*Rising Edge NO prescaler*/
    1198:	81 e4       	ldi	r24, 0x41	; 65
    119a:	8e bd       	out	0x2e, r24	; 46
	while( GetBit(Timer1_TIFR_Reg,ICF1) == 0 ){
    119c:	08 b6       	in	r0, 0x38	; 56
    119e:	05 fe       	sbrs	r0, 5
    11a0:	fd cf       	rjmp	.-6      	; 0x119c <Timer1_Input_Capture+0x24>
		/* Do nothing*/
	}
	a=Timer1_ICR1_Reg;
    11a2:	46 b5       	in	r20, 0x26	; 38
    11a4:	57 b5       	in	r21, 0x27	; 39
	
	SetBit(Timer1_TIFR_Reg,ICF1);
    11a6:	98 b7       	in	r25, 0x38	; 56
    11a8:	90 62       	ori	r25, 0x20	; 32
    11aa:	98 bf       	out	0x38, r25	; 56
	
	Timer1_TCCR1B_Reg=0x01;
    11ac:	81 e0       	ldi	r24, 0x01	; 1
    11ae:	8e bd       	out	0x2e, r24	; 46
	while( GetBit(Timer1_TIFR_Reg,ICF1) == 0 ){
    11b0:	08 b6       	in	r0, 0x38	; 56
    11b2:	05 fe       	sbrs	r0, 5
    11b4:	fd cf       	rjmp	.-6      	; 0x11b0 <Timer1_Input_Capture+0x38>
		/* Do nothing*/
	}
	b=Timer1_ICR1_Reg;
    11b6:	26 b5       	in	r18, 0x26	; 38
    11b8:	37 b5       	in	r19, 0x27	; 39
	
	SetBit(Timer1_TIFR_Reg,ICF1);
    11ba:	98 b7       	in	r25, 0x38	; 56
    11bc:	90 62       	ori	r25, 0x20	; 32
    11be:	98 bf       	out	0x38, r25	; 56
	
	Timer1_TCCR1B_Reg = 0x41; 
    11c0:	81 e4       	ldi	r24, 0x41	; 65
    11c2:	8e bd       	out	0x2e, r24	; 46
	while( GetBit(Timer1_TIFR_Reg,ICF1) == 0 )
    11c4:	08 b6       	in	r0, 0x38	; 56
    11c6:	05 fe       	sbrs	r0, 5
    11c8:	fd cf       	rjmp	.-6      	; 0x11c4 <Timer1_Input_Capture+0x4c>
	{
		
	}
	c=Timer1_ICR1_Reg;
    11ca:	c6 b4       	in	r12, 0x26	; 38
    11cc:	d7 b4       	in	r13, 0x27	; 39
	
	SetBit(Timer1_TIFR_Reg,ICF1);
    11ce:	98 b7       	in	r25, 0x38	; 56
    11d0:	90 62       	ori	r25, 0x20	; 32
    11d2:	98 bf       	out	0x38, r25	; 56
	
	Timer1_TCCR1B_Reg =0; /*Stopping Timer*/
    11d4:	1e bc       	out	0x2e, r1	; 46
	
	
	if(a<b && b<c){
    11d6:	42 17       	cp	r20, r18
    11d8:	53 07       	cpc	r21, r19
    11da:	08 f0       	brcs	.+2      	; 0x11de <Timer1_Input_Capture+0x66>
    11dc:	41 c0       	rjmp	.+130    	; 0x1260 <Timer1_Input_Capture+0xe8>
    11de:	2c 15       	cp	r18, r12
    11e0:	3d 05       	cpc	r19, r13
    11e2:	f0 f5       	brcc	.+124    	; 0x1260 <Timer1_Input_Capture+0xe8>
		High = b-a;
    11e4:	e9 01       	movw	r28, r18
    11e6:	c4 1b       	sub	r28, r20
    11e8:	d5 0b       	sbc	r29, r21
		Periodic_Time=c-a;	
    11ea:	c4 1a       	sub	r12, r20
    11ec:	d5 0a       	sbc	r13, r21
		if (Periodic_Time>=246)
    11ee:	86 ef       	ldi	r24, 0xF6	; 246
    11f0:	c8 16       	cp	r12, r24
    11f2:	d1 04       	cpc	r13, r1
    11f4:	70 f1       	brcs	.+92     	; 0x1252 <Timer1_Input_Capture+0xda>
    11f6:	8b 01       	movw	r16, r22
    11f8:	5f 01       	movw	r10, r30
		{
			*Frequency = 2*(F_CPU/Periodic_Time) ;
    11fa:	e1 2c       	mov	r14, r1
    11fc:	f1 2c       	mov	r15, r1
    11fe:	60 e0       	ldi	r22, 0x00	; 0
    1200:	72 e1       	ldi	r23, 0x12	; 18
    1202:	8a e7       	ldi	r24, 0x7A	; 122
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	a7 01       	movw	r20, r14
    1208:	96 01       	movw	r18, r12
    120a:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <__udivmodsi4>
    120e:	22 0f       	add	r18, r18
    1210:	33 1f       	adc	r19, r19
    1212:	f5 01       	movw	r30, r10
    1214:	31 83       	std	Z+1, r19	; 0x01
    1216:	20 83       	st	Z, r18
			
			*DutyCycle=((float)High /((float)Periodic_Time))*100;
    1218:	be 01       	movw	r22, r28
    121a:	80 e0       	ldi	r24, 0x00	; 0
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	0e 94 de 09 	call	0x13bc	; 0x13bc <__floatunsisf>
    1222:	4b 01       	movw	r8, r22
    1224:	5c 01       	movw	r10, r24
    1226:	c7 01       	movw	r24, r14
    1228:	b6 01       	movw	r22, r12
    122a:	0e 94 de 09 	call	0x13bc	; 0x13bc <__floatunsisf>
    122e:	9b 01       	movw	r18, r22
    1230:	ac 01       	movw	r20, r24
    1232:	c5 01       	movw	r24, r10
    1234:	b4 01       	movw	r22, r8
    1236:	0e 94 3d 09 	call	0x127a	; 0x127a <__divsf3>
    123a:	20 e0       	ldi	r18, 0x00	; 0
    123c:	30 e0       	ldi	r19, 0x00	; 0
    123e:	48 ec       	ldi	r20, 0xC8	; 200
    1240:	52 e4       	ldi	r21, 0x42	; 66
    1242:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <__mulsf3>
    1246:	0e 94 af 09 	call	0x135e	; 0x135e <__fixunssfsi>
    124a:	f8 01       	movw	r30, r16
    124c:	71 83       	std	Z+1, r23	; 0x01
    124e:	60 83       	st	Z, r22
    1250:	07 c0       	rjmp	.+14     	; 0x1260 <Timer1_Input_Capture+0xe8>
		}else{
			*Frequency = 65500;
    1252:	8c ed       	ldi	r24, 0xDC	; 220
    1254:	9f ef       	ldi	r25, 0xFF	; 255
    1256:	91 83       	std	Z+1, r25	; 0x01
    1258:	80 83       	st	Z, r24
			*DutyCycle=0;
    125a:	fb 01       	movw	r30, r22
    125c:	11 82       	std	Z+1, r1	; 0x01
    125e:	10 82       	st	Z, r1
		}
		
		
		
	}	
    1260:	df 91       	pop	r29
    1262:	cf 91       	pop	r28
    1264:	1f 91       	pop	r17
    1266:	0f 91       	pop	r16
    1268:	ff 90       	pop	r15
    126a:	ef 90       	pop	r14
    126c:	df 90       	pop	r13
    126e:	cf 90       	pop	r12
    1270:	bf 90       	pop	r11
    1272:	af 90       	pop	r10
    1274:	9f 90       	pop	r9
    1276:	8f 90       	pop	r8
    1278:	08 95       	ret

0000127a <__divsf3>:
    127a:	0e 94 51 09 	call	0x12a2	; 0x12a2 <__divsf3x>
    127e:	0c 94 32 0a 	jmp	0x1464	; 0x1464 <__fp_round>
    1282:	0e 94 2b 0a 	call	0x1456	; 0x1456 <__fp_pscB>
    1286:	58 f0       	brcs	.+22     	; 0x129e <__divsf3+0x24>
    1288:	0e 94 24 0a 	call	0x1448	; 0x1448 <__fp_pscA>
    128c:	40 f0       	brcs	.+16     	; 0x129e <__divsf3+0x24>
    128e:	29 f4       	brne	.+10     	; 0x129a <__divsf3+0x20>
    1290:	5f 3f       	cpi	r21, 0xFF	; 255
    1292:	29 f0       	breq	.+10     	; 0x129e <__divsf3+0x24>
    1294:	0c 94 1b 0a 	jmp	0x1436	; 0x1436 <__fp_inf>
    1298:	51 11       	cpse	r21, r1
    129a:	0c 94 66 0a 	jmp	0x14cc	; 0x14cc <__fp_szero>
    129e:	0c 94 21 0a 	jmp	0x1442	; 0x1442 <__fp_nan>

000012a2 <__divsf3x>:
    12a2:	0e 94 43 0a 	call	0x1486	; 0x1486 <__fp_split3>
    12a6:	68 f3       	brcs	.-38     	; 0x1282 <__divsf3+0x8>

000012a8 <__divsf3_pse>:
    12a8:	99 23       	and	r25, r25
    12aa:	b1 f3       	breq	.-20     	; 0x1298 <__divsf3+0x1e>
    12ac:	55 23       	and	r21, r21
    12ae:	91 f3       	breq	.-28     	; 0x1294 <__divsf3+0x1a>
    12b0:	95 1b       	sub	r25, r21
    12b2:	55 0b       	sbc	r21, r21
    12b4:	bb 27       	eor	r27, r27
    12b6:	aa 27       	eor	r26, r26
    12b8:	62 17       	cp	r22, r18
    12ba:	73 07       	cpc	r23, r19
    12bc:	84 07       	cpc	r24, r20
    12be:	38 f0       	brcs	.+14     	; 0x12ce <__divsf3_pse+0x26>
    12c0:	9f 5f       	subi	r25, 0xFF	; 255
    12c2:	5f 4f       	sbci	r21, 0xFF	; 255
    12c4:	22 0f       	add	r18, r18
    12c6:	33 1f       	adc	r19, r19
    12c8:	44 1f       	adc	r20, r20
    12ca:	aa 1f       	adc	r26, r26
    12cc:	a9 f3       	breq	.-22     	; 0x12b8 <__divsf3_pse+0x10>
    12ce:	35 d0       	rcall	.+106    	; 0x133a <__divsf3_pse+0x92>
    12d0:	0e 2e       	mov	r0, r30
    12d2:	3a f0       	brmi	.+14     	; 0x12e2 <__divsf3_pse+0x3a>
    12d4:	e0 e8       	ldi	r30, 0x80	; 128
    12d6:	32 d0       	rcall	.+100    	; 0x133c <__divsf3_pse+0x94>
    12d8:	91 50       	subi	r25, 0x01	; 1
    12da:	50 40       	sbci	r21, 0x00	; 0
    12dc:	e6 95       	lsr	r30
    12de:	00 1c       	adc	r0, r0
    12e0:	ca f7       	brpl	.-14     	; 0x12d4 <__divsf3_pse+0x2c>
    12e2:	2b d0       	rcall	.+86     	; 0x133a <__divsf3_pse+0x92>
    12e4:	fe 2f       	mov	r31, r30
    12e6:	29 d0       	rcall	.+82     	; 0x133a <__divsf3_pse+0x92>
    12e8:	66 0f       	add	r22, r22
    12ea:	77 1f       	adc	r23, r23
    12ec:	88 1f       	adc	r24, r24
    12ee:	bb 1f       	adc	r27, r27
    12f0:	26 17       	cp	r18, r22
    12f2:	37 07       	cpc	r19, r23
    12f4:	48 07       	cpc	r20, r24
    12f6:	ab 07       	cpc	r26, r27
    12f8:	b0 e8       	ldi	r27, 0x80	; 128
    12fa:	09 f0       	breq	.+2      	; 0x12fe <__divsf3_pse+0x56>
    12fc:	bb 0b       	sbc	r27, r27
    12fe:	80 2d       	mov	r24, r0
    1300:	bf 01       	movw	r22, r30
    1302:	ff 27       	eor	r31, r31
    1304:	93 58       	subi	r25, 0x83	; 131
    1306:	5f 4f       	sbci	r21, 0xFF	; 255
    1308:	3a f0       	brmi	.+14     	; 0x1318 <__divsf3_pse+0x70>
    130a:	9e 3f       	cpi	r25, 0xFE	; 254
    130c:	51 05       	cpc	r21, r1
    130e:	78 f0       	brcs	.+30     	; 0x132e <__divsf3_pse+0x86>
    1310:	0c 94 1b 0a 	jmp	0x1436	; 0x1436 <__fp_inf>
    1314:	0c 94 66 0a 	jmp	0x14cc	; 0x14cc <__fp_szero>
    1318:	5f 3f       	cpi	r21, 0xFF	; 255
    131a:	e4 f3       	brlt	.-8      	; 0x1314 <__divsf3_pse+0x6c>
    131c:	98 3e       	cpi	r25, 0xE8	; 232
    131e:	d4 f3       	brlt	.-12     	; 0x1314 <__divsf3_pse+0x6c>
    1320:	86 95       	lsr	r24
    1322:	77 95       	ror	r23
    1324:	67 95       	ror	r22
    1326:	b7 95       	ror	r27
    1328:	f7 95       	ror	r31
    132a:	9f 5f       	subi	r25, 0xFF	; 255
    132c:	c9 f7       	brne	.-14     	; 0x1320 <__divsf3_pse+0x78>
    132e:	88 0f       	add	r24, r24
    1330:	91 1d       	adc	r25, r1
    1332:	96 95       	lsr	r25
    1334:	87 95       	ror	r24
    1336:	97 f9       	bld	r25, 7
    1338:	08 95       	ret
    133a:	e1 e0       	ldi	r30, 0x01	; 1
    133c:	66 0f       	add	r22, r22
    133e:	77 1f       	adc	r23, r23
    1340:	88 1f       	adc	r24, r24
    1342:	bb 1f       	adc	r27, r27
    1344:	62 17       	cp	r22, r18
    1346:	73 07       	cpc	r23, r19
    1348:	84 07       	cpc	r24, r20
    134a:	ba 07       	cpc	r27, r26
    134c:	20 f0       	brcs	.+8      	; 0x1356 <__divsf3_pse+0xae>
    134e:	62 1b       	sub	r22, r18
    1350:	73 0b       	sbc	r23, r19
    1352:	84 0b       	sbc	r24, r20
    1354:	ba 0b       	sbc	r27, r26
    1356:	ee 1f       	adc	r30, r30
    1358:	88 f7       	brcc	.-30     	; 0x133c <__divsf3_pse+0x94>
    135a:	e0 95       	com	r30
    135c:	08 95       	ret

0000135e <__fixunssfsi>:
    135e:	0e 94 4b 0a 	call	0x1496	; 0x1496 <__fp_splitA>
    1362:	88 f0       	brcs	.+34     	; 0x1386 <__fixunssfsi+0x28>
    1364:	9f 57       	subi	r25, 0x7F	; 127
    1366:	98 f0       	brcs	.+38     	; 0x138e <__fixunssfsi+0x30>
    1368:	b9 2f       	mov	r27, r25
    136a:	99 27       	eor	r25, r25
    136c:	b7 51       	subi	r27, 0x17	; 23
    136e:	b0 f0       	brcs	.+44     	; 0x139c <__fixunssfsi+0x3e>
    1370:	e1 f0       	breq	.+56     	; 0x13aa <__fixunssfsi+0x4c>
    1372:	66 0f       	add	r22, r22
    1374:	77 1f       	adc	r23, r23
    1376:	88 1f       	adc	r24, r24
    1378:	99 1f       	adc	r25, r25
    137a:	1a f0       	brmi	.+6      	; 0x1382 <__fixunssfsi+0x24>
    137c:	ba 95       	dec	r27
    137e:	c9 f7       	brne	.-14     	; 0x1372 <__fixunssfsi+0x14>
    1380:	14 c0       	rjmp	.+40     	; 0x13aa <__fixunssfsi+0x4c>
    1382:	b1 30       	cpi	r27, 0x01	; 1
    1384:	91 f0       	breq	.+36     	; 0x13aa <__fixunssfsi+0x4c>
    1386:	0e 94 65 0a 	call	0x14ca	; 0x14ca <__fp_zero>
    138a:	b1 e0       	ldi	r27, 0x01	; 1
    138c:	08 95       	ret
    138e:	0c 94 65 0a 	jmp	0x14ca	; 0x14ca <__fp_zero>
    1392:	67 2f       	mov	r22, r23
    1394:	78 2f       	mov	r23, r24
    1396:	88 27       	eor	r24, r24
    1398:	b8 5f       	subi	r27, 0xF8	; 248
    139a:	39 f0       	breq	.+14     	; 0x13aa <__fixunssfsi+0x4c>
    139c:	b9 3f       	cpi	r27, 0xF9	; 249
    139e:	cc f3       	brlt	.-14     	; 0x1392 <__fixunssfsi+0x34>
    13a0:	86 95       	lsr	r24
    13a2:	77 95       	ror	r23
    13a4:	67 95       	ror	r22
    13a6:	b3 95       	inc	r27
    13a8:	d9 f7       	brne	.-10     	; 0x13a0 <__fixunssfsi+0x42>
    13aa:	3e f4       	brtc	.+14     	; 0x13ba <__fixunssfsi+0x5c>
    13ac:	90 95       	com	r25
    13ae:	80 95       	com	r24
    13b0:	70 95       	com	r23
    13b2:	61 95       	neg	r22
    13b4:	7f 4f       	sbci	r23, 0xFF	; 255
    13b6:	8f 4f       	sbci	r24, 0xFF	; 255
    13b8:	9f 4f       	sbci	r25, 0xFF	; 255
    13ba:	08 95       	ret

000013bc <__floatunsisf>:
    13bc:	e8 94       	clt
    13be:	09 c0       	rjmp	.+18     	; 0x13d2 <__floatsisf+0x12>

000013c0 <__floatsisf>:
    13c0:	97 fb       	bst	r25, 7
    13c2:	3e f4       	brtc	.+14     	; 0x13d2 <__floatsisf+0x12>
    13c4:	90 95       	com	r25
    13c6:	80 95       	com	r24
    13c8:	70 95       	com	r23
    13ca:	61 95       	neg	r22
    13cc:	7f 4f       	sbci	r23, 0xFF	; 255
    13ce:	8f 4f       	sbci	r24, 0xFF	; 255
    13d0:	9f 4f       	sbci	r25, 0xFF	; 255
    13d2:	99 23       	and	r25, r25
    13d4:	a9 f0       	breq	.+42     	; 0x1400 <__floatsisf+0x40>
    13d6:	f9 2f       	mov	r31, r25
    13d8:	96 e9       	ldi	r25, 0x96	; 150
    13da:	bb 27       	eor	r27, r27
    13dc:	93 95       	inc	r25
    13de:	f6 95       	lsr	r31
    13e0:	87 95       	ror	r24
    13e2:	77 95       	ror	r23
    13e4:	67 95       	ror	r22
    13e6:	b7 95       	ror	r27
    13e8:	f1 11       	cpse	r31, r1
    13ea:	f8 cf       	rjmp	.-16     	; 0x13dc <__floatsisf+0x1c>
    13ec:	fa f4       	brpl	.+62     	; 0x142c <__floatsisf+0x6c>
    13ee:	bb 0f       	add	r27, r27
    13f0:	11 f4       	brne	.+4      	; 0x13f6 <__floatsisf+0x36>
    13f2:	60 ff       	sbrs	r22, 0
    13f4:	1b c0       	rjmp	.+54     	; 0x142c <__floatsisf+0x6c>
    13f6:	6f 5f       	subi	r22, 0xFF	; 255
    13f8:	7f 4f       	sbci	r23, 0xFF	; 255
    13fa:	8f 4f       	sbci	r24, 0xFF	; 255
    13fc:	9f 4f       	sbci	r25, 0xFF	; 255
    13fe:	16 c0       	rjmp	.+44     	; 0x142c <__floatsisf+0x6c>
    1400:	88 23       	and	r24, r24
    1402:	11 f0       	breq	.+4      	; 0x1408 <__floatsisf+0x48>
    1404:	96 e9       	ldi	r25, 0x96	; 150
    1406:	11 c0       	rjmp	.+34     	; 0x142a <__floatsisf+0x6a>
    1408:	77 23       	and	r23, r23
    140a:	21 f0       	breq	.+8      	; 0x1414 <__floatsisf+0x54>
    140c:	9e e8       	ldi	r25, 0x8E	; 142
    140e:	87 2f       	mov	r24, r23
    1410:	76 2f       	mov	r23, r22
    1412:	05 c0       	rjmp	.+10     	; 0x141e <__floatsisf+0x5e>
    1414:	66 23       	and	r22, r22
    1416:	71 f0       	breq	.+28     	; 0x1434 <__floatsisf+0x74>
    1418:	96 e8       	ldi	r25, 0x86	; 134
    141a:	86 2f       	mov	r24, r22
    141c:	70 e0       	ldi	r23, 0x00	; 0
    141e:	60 e0       	ldi	r22, 0x00	; 0
    1420:	2a f0       	brmi	.+10     	; 0x142c <__floatsisf+0x6c>
    1422:	9a 95       	dec	r25
    1424:	66 0f       	add	r22, r22
    1426:	77 1f       	adc	r23, r23
    1428:	88 1f       	adc	r24, r24
    142a:	da f7       	brpl	.-10     	; 0x1422 <__floatsisf+0x62>
    142c:	88 0f       	add	r24, r24
    142e:	96 95       	lsr	r25
    1430:	87 95       	ror	r24
    1432:	97 f9       	bld	r25, 7
    1434:	08 95       	ret

00001436 <__fp_inf>:
    1436:	97 f9       	bld	r25, 7
    1438:	9f 67       	ori	r25, 0x7F	; 127
    143a:	80 e8       	ldi	r24, 0x80	; 128
    143c:	70 e0       	ldi	r23, 0x00	; 0
    143e:	60 e0       	ldi	r22, 0x00	; 0
    1440:	08 95       	ret

00001442 <__fp_nan>:
    1442:	9f ef       	ldi	r25, 0xFF	; 255
    1444:	80 ec       	ldi	r24, 0xC0	; 192
    1446:	08 95       	ret

00001448 <__fp_pscA>:
    1448:	00 24       	eor	r0, r0
    144a:	0a 94       	dec	r0
    144c:	16 16       	cp	r1, r22
    144e:	17 06       	cpc	r1, r23
    1450:	18 06       	cpc	r1, r24
    1452:	09 06       	cpc	r0, r25
    1454:	08 95       	ret

00001456 <__fp_pscB>:
    1456:	00 24       	eor	r0, r0
    1458:	0a 94       	dec	r0
    145a:	12 16       	cp	r1, r18
    145c:	13 06       	cpc	r1, r19
    145e:	14 06       	cpc	r1, r20
    1460:	05 06       	cpc	r0, r21
    1462:	08 95       	ret

00001464 <__fp_round>:
    1464:	09 2e       	mov	r0, r25
    1466:	03 94       	inc	r0
    1468:	00 0c       	add	r0, r0
    146a:	11 f4       	brne	.+4      	; 0x1470 <__fp_round+0xc>
    146c:	88 23       	and	r24, r24
    146e:	52 f0       	brmi	.+20     	; 0x1484 <__fp_round+0x20>
    1470:	bb 0f       	add	r27, r27
    1472:	40 f4       	brcc	.+16     	; 0x1484 <__fp_round+0x20>
    1474:	bf 2b       	or	r27, r31
    1476:	11 f4       	brne	.+4      	; 0x147c <__fp_round+0x18>
    1478:	60 ff       	sbrs	r22, 0
    147a:	04 c0       	rjmp	.+8      	; 0x1484 <__fp_round+0x20>
    147c:	6f 5f       	subi	r22, 0xFF	; 255
    147e:	7f 4f       	sbci	r23, 0xFF	; 255
    1480:	8f 4f       	sbci	r24, 0xFF	; 255
    1482:	9f 4f       	sbci	r25, 0xFF	; 255
    1484:	08 95       	ret

00001486 <__fp_split3>:
    1486:	57 fd       	sbrc	r21, 7
    1488:	90 58       	subi	r25, 0x80	; 128
    148a:	44 0f       	add	r20, r20
    148c:	55 1f       	adc	r21, r21
    148e:	59 f0       	breq	.+22     	; 0x14a6 <__fp_splitA+0x10>
    1490:	5f 3f       	cpi	r21, 0xFF	; 255
    1492:	71 f0       	breq	.+28     	; 0x14b0 <__fp_splitA+0x1a>
    1494:	47 95       	ror	r20

00001496 <__fp_splitA>:
    1496:	88 0f       	add	r24, r24
    1498:	97 fb       	bst	r25, 7
    149a:	99 1f       	adc	r25, r25
    149c:	61 f0       	breq	.+24     	; 0x14b6 <__fp_splitA+0x20>
    149e:	9f 3f       	cpi	r25, 0xFF	; 255
    14a0:	79 f0       	breq	.+30     	; 0x14c0 <__fp_splitA+0x2a>
    14a2:	87 95       	ror	r24
    14a4:	08 95       	ret
    14a6:	12 16       	cp	r1, r18
    14a8:	13 06       	cpc	r1, r19
    14aa:	14 06       	cpc	r1, r20
    14ac:	55 1f       	adc	r21, r21
    14ae:	f2 cf       	rjmp	.-28     	; 0x1494 <__fp_split3+0xe>
    14b0:	46 95       	lsr	r20
    14b2:	f1 df       	rcall	.-30     	; 0x1496 <__fp_splitA>
    14b4:	08 c0       	rjmp	.+16     	; 0x14c6 <__fp_splitA+0x30>
    14b6:	16 16       	cp	r1, r22
    14b8:	17 06       	cpc	r1, r23
    14ba:	18 06       	cpc	r1, r24
    14bc:	99 1f       	adc	r25, r25
    14be:	f1 cf       	rjmp	.-30     	; 0x14a2 <__fp_splitA+0xc>
    14c0:	86 95       	lsr	r24
    14c2:	71 05       	cpc	r23, r1
    14c4:	61 05       	cpc	r22, r1
    14c6:	08 94       	sec
    14c8:	08 95       	ret

000014ca <__fp_zero>:
    14ca:	e8 94       	clt

000014cc <__fp_szero>:
    14cc:	bb 27       	eor	r27, r27
    14ce:	66 27       	eor	r22, r22
    14d0:	77 27       	eor	r23, r23
    14d2:	cb 01       	movw	r24, r22
    14d4:	97 f9       	bld	r25, 7
    14d6:	08 95       	ret

000014d8 <__mulsf3>:
    14d8:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <__mulsf3x>
    14dc:	0c 94 32 0a 	jmp	0x1464	; 0x1464 <__fp_round>
    14e0:	0e 94 24 0a 	call	0x1448	; 0x1448 <__fp_pscA>
    14e4:	38 f0       	brcs	.+14     	; 0x14f4 <__mulsf3+0x1c>
    14e6:	0e 94 2b 0a 	call	0x1456	; 0x1456 <__fp_pscB>
    14ea:	20 f0       	brcs	.+8      	; 0x14f4 <__mulsf3+0x1c>
    14ec:	95 23       	and	r25, r21
    14ee:	11 f0       	breq	.+4      	; 0x14f4 <__mulsf3+0x1c>
    14f0:	0c 94 1b 0a 	jmp	0x1436	; 0x1436 <__fp_inf>
    14f4:	0c 94 21 0a 	jmp	0x1442	; 0x1442 <__fp_nan>
    14f8:	11 24       	eor	r1, r1
    14fa:	0c 94 66 0a 	jmp	0x14cc	; 0x14cc <__fp_szero>

000014fe <__mulsf3x>:
    14fe:	0e 94 43 0a 	call	0x1486	; 0x1486 <__fp_split3>
    1502:	70 f3       	brcs	.-36     	; 0x14e0 <__mulsf3+0x8>

00001504 <__mulsf3_pse>:
    1504:	95 9f       	mul	r25, r21
    1506:	c1 f3       	breq	.-16     	; 0x14f8 <__mulsf3+0x20>
    1508:	95 0f       	add	r25, r21
    150a:	50 e0       	ldi	r21, 0x00	; 0
    150c:	55 1f       	adc	r21, r21
    150e:	62 9f       	mul	r22, r18
    1510:	f0 01       	movw	r30, r0
    1512:	72 9f       	mul	r23, r18
    1514:	bb 27       	eor	r27, r27
    1516:	f0 0d       	add	r31, r0
    1518:	b1 1d       	adc	r27, r1
    151a:	63 9f       	mul	r22, r19
    151c:	aa 27       	eor	r26, r26
    151e:	f0 0d       	add	r31, r0
    1520:	b1 1d       	adc	r27, r1
    1522:	aa 1f       	adc	r26, r26
    1524:	64 9f       	mul	r22, r20
    1526:	66 27       	eor	r22, r22
    1528:	b0 0d       	add	r27, r0
    152a:	a1 1d       	adc	r26, r1
    152c:	66 1f       	adc	r22, r22
    152e:	82 9f       	mul	r24, r18
    1530:	22 27       	eor	r18, r18
    1532:	b0 0d       	add	r27, r0
    1534:	a1 1d       	adc	r26, r1
    1536:	62 1f       	adc	r22, r18
    1538:	73 9f       	mul	r23, r19
    153a:	b0 0d       	add	r27, r0
    153c:	a1 1d       	adc	r26, r1
    153e:	62 1f       	adc	r22, r18
    1540:	83 9f       	mul	r24, r19
    1542:	a0 0d       	add	r26, r0
    1544:	61 1d       	adc	r22, r1
    1546:	22 1f       	adc	r18, r18
    1548:	74 9f       	mul	r23, r20
    154a:	33 27       	eor	r19, r19
    154c:	a0 0d       	add	r26, r0
    154e:	61 1d       	adc	r22, r1
    1550:	23 1f       	adc	r18, r19
    1552:	84 9f       	mul	r24, r20
    1554:	60 0d       	add	r22, r0
    1556:	21 1d       	adc	r18, r1
    1558:	82 2f       	mov	r24, r18
    155a:	76 2f       	mov	r23, r22
    155c:	6a 2f       	mov	r22, r26
    155e:	11 24       	eor	r1, r1
    1560:	9f 57       	subi	r25, 0x7F	; 127
    1562:	50 40       	sbci	r21, 0x00	; 0
    1564:	9a f0       	brmi	.+38     	; 0x158c <__mulsf3_pse+0x88>
    1566:	f1 f0       	breq	.+60     	; 0x15a4 <__mulsf3_pse+0xa0>
    1568:	88 23       	and	r24, r24
    156a:	4a f0       	brmi	.+18     	; 0x157e <__mulsf3_pse+0x7a>
    156c:	ee 0f       	add	r30, r30
    156e:	ff 1f       	adc	r31, r31
    1570:	bb 1f       	adc	r27, r27
    1572:	66 1f       	adc	r22, r22
    1574:	77 1f       	adc	r23, r23
    1576:	88 1f       	adc	r24, r24
    1578:	91 50       	subi	r25, 0x01	; 1
    157a:	50 40       	sbci	r21, 0x00	; 0
    157c:	a9 f7       	brne	.-22     	; 0x1568 <__mulsf3_pse+0x64>
    157e:	9e 3f       	cpi	r25, 0xFE	; 254
    1580:	51 05       	cpc	r21, r1
    1582:	80 f0       	brcs	.+32     	; 0x15a4 <__mulsf3_pse+0xa0>
    1584:	0c 94 1b 0a 	jmp	0x1436	; 0x1436 <__fp_inf>
    1588:	0c 94 66 0a 	jmp	0x14cc	; 0x14cc <__fp_szero>
    158c:	5f 3f       	cpi	r21, 0xFF	; 255
    158e:	e4 f3       	brlt	.-8      	; 0x1588 <__mulsf3_pse+0x84>
    1590:	98 3e       	cpi	r25, 0xE8	; 232
    1592:	d4 f3       	brlt	.-12     	; 0x1588 <__mulsf3_pse+0x84>
    1594:	86 95       	lsr	r24
    1596:	77 95       	ror	r23
    1598:	67 95       	ror	r22
    159a:	b7 95       	ror	r27
    159c:	f7 95       	ror	r31
    159e:	e7 95       	ror	r30
    15a0:	9f 5f       	subi	r25, 0xFF	; 255
    15a2:	c1 f7       	brne	.-16     	; 0x1594 <__mulsf3_pse+0x90>
    15a4:	fe 2b       	or	r31, r30
    15a6:	88 0f       	add	r24, r24
    15a8:	91 1d       	adc	r25, r1
    15aa:	96 95       	lsr	r25
    15ac:	87 95       	ror	r24
    15ae:	97 f9       	bld	r25, 7
    15b0:	08 95       	ret

000015b2 <__udivmodsi4>:
    15b2:	a1 e2       	ldi	r26, 0x21	; 33
    15b4:	1a 2e       	mov	r1, r26
    15b6:	aa 1b       	sub	r26, r26
    15b8:	bb 1b       	sub	r27, r27
    15ba:	fd 01       	movw	r30, r26
    15bc:	0d c0       	rjmp	.+26     	; 0x15d8 <__udivmodsi4_ep>

000015be <__udivmodsi4_loop>:
    15be:	aa 1f       	adc	r26, r26
    15c0:	bb 1f       	adc	r27, r27
    15c2:	ee 1f       	adc	r30, r30
    15c4:	ff 1f       	adc	r31, r31
    15c6:	a2 17       	cp	r26, r18
    15c8:	b3 07       	cpc	r27, r19
    15ca:	e4 07       	cpc	r30, r20
    15cc:	f5 07       	cpc	r31, r21
    15ce:	20 f0       	brcs	.+8      	; 0x15d8 <__udivmodsi4_ep>
    15d0:	a2 1b       	sub	r26, r18
    15d2:	b3 0b       	sbc	r27, r19
    15d4:	e4 0b       	sbc	r30, r20
    15d6:	f5 0b       	sbc	r31, r21

000015d8 <__udivmodsi4_ep>:
    15d8:	66 1f       	adc	r22, r22
    15da:	77 1f       	adc	r23, r23
    15dc:	88 1f       	adc	r24, r24
    15de:	99 1f       	adc	r25, r25
    15e0:	1a 94       	dec	r1
    15e2:	69 f7       	brne	.-38     	; 0x15be <__udivmodsi4_loop>
    15e4:	60 95       	com	r22
    15e6:	70 95       	com	r23
    15e8:	80 95       	com	r24
    15ea:	90 95       	com	r25
    15ec:	9b 01       	movw	r18, r22
    15ee:	ac 01       	movw	r20, r24
    15f0:	bd 01       	movw	r22, r26
    15f2:	cf 01       	movw	r24, r30
    15f4:	08 95       	ret

000015f6 <__umulhisi3>:
    15f6:	a2 9f       	mul	r26, r18
    15f8:	b0 01       	movw	r22, r0
    15fa:	b3 9f       	mul	r27, r19
    15fc:	c0 01       	movw	r24, r0
    15fe:	a3 9f       	mul	r26, r19
    1600:	70 0d       	add	r23, r0
    1602:	81 1d       	adc	r24, r1
    1604:	11 24       	eor	r1, r1
    1606:	91 1d       	adc	r25, r1
    1608:	b2 9f       	mul	r27, r18
    160a:	70 0d       	add	r23, r0
    160c:	81 1d       	adc	r24, r1
    160e:	11 24       	eor	r1, r1
    1610:	91 1d       	adc	r25, r1
    1612:	08 95       	ret

00001614 <_exit>:
    1614:	f8 94       	cli

00001616 <__stop_program>:
    1616:	ff cf       	rjmp	.-2      	; 0x1616 <__stop_program>
